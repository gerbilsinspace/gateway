{
  "ast": null,
  "code": "import fetch from 'isomorphic-fetch';\nimport { url as urlStart, colours } from './config';\nexport const getAllColours = (colour = '') => {\n  const c = colours.find(c => c.name.toLowerCase() === colour.toLowerCase());\n  return c ? [c.name, c.hex, c.hexLight] : [];\n};\nexport const changeColourToHex = (colour, lightVariant) => {\n  const [, hex, hexLight] = getAllColours(colour);\n  return lightVariant ? hexLight : hex;\n};\nexport const getMenuColour = pageData => pageData.header && pageData.header.menuColour || pageData.menuColour || 'red';\nexport const getMenu = async () => {\n  const menuUrl = urlStart + 'data/menu.json';\n  const menuResponse = await fetch(menuUrl).catch(e => {\n    return e;\n  });\n  const menuData = await menuResponse.json();\n  return menuData;\n};\nexport const getFullUrl = (urlEnd = '') => {\n  if (urlEnd.includes('http')) {\n    return urlEnd;\n  }\n\n  if (urlEnd[0] === '/') {\n    urlEnd = urlEnd.replace('/', '');\n  }\n\n  return urlStart + urlEnd;\n};\nexport const getLogo = async menuColour => {\n  const logoLocation = getFullUrl(`data/logos/${menuColour || 'red'}.json`);\n  const logoResponse = await fetch(logoLocation).catch(e => {\n    return e;\n  });\n  const logoData = await logoResponse.json();\n  const logoUrl = getFullUrl(logoData.image);\n  return logoUrl;\n};\nexport const getData = async pageName => {\n  const pageUrl = urlStart + pageName;\n  const response = await fetch(pageUrl);\n\n  if (!response.ok) {\n    return new Error('something messed up');\n  }\n\n  const pageData = await response.json();\n  return pageData;\n};\nexport const getResizedImageUrl = url => {\n  if (!url) {\n    return;\n  }\n\n  const pageWidth = window.innerWidth;\n\n  if (pageWidth < 768) {\n    return url.split('uploads/').join('uploads/mobile/');\n  } else if (pageWidth < 991) {\n    return url.split('uploads/').join('uploads/tablet/');\n  }\n\n  return url.split('uploads/').join('uploads/desktop/');\n};",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
