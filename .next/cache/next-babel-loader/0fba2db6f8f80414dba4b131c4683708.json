{
  "ast": null,
  "code": "var _jsxFileName = \"/home/joe/dev/gateway/pages/people/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { getData, getMenuColour, changeColourToHex, getFullUrl, getAllColours } from '../../helpers';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport Header from '../../templates/Header';\nimport Deck from '../../components/Deck';\nimport Footer from '../../templates/Footer';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Clearfix from '../../components/Clearfix';\nconst StyledLink = styled.a`\n  padding: 0 30px;\n  color: white;\n  background-color: ${props => props.colour};\n  display: block;\n  height: 300px;\n`;\nconst FilterTitle = styled.h1`\n  font-size: 30px;\n  line-height: 76px;\n  padding: 0 30px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\nconst FilterItemTitle = styled.h2`\n  font-size: 30px;\n  line-height: 76px;\n`;\nconst FilterItemDeck = styled.p`\n  line-height: 30px;\n  padding-bottom: 20px;\n  color: white;\n\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst PersonBlock = styled.div`\n  width: 50%;\n  float: left;\n  position: relative;\n  margin-bottom: 10px;\n  height: 200px;\n  color: white;\n  background-color: ${props => props.colour};\n`;\nconst Padding = styled.div`\n  padding: 20px;\n  line-height: 30px;\n`;\nconst Email = styled.p`\n  position: absolute;\n  bottom: 20px;\n`;\nconst Filter = styled.li`\n  @media screen and (min-width: 991px) {\n    width: calc(50% - 10px);\n    margin-bottom: 20px;\n\n    &:nth-child(odd) {\n      float: left;\n    }\n\n    &:nth-child(even) {\n      float: right;\n    }\n  }\n`;\nconst Person = styled.li`\n  @media screen and (min-width: 991px) {\n    width: calc(50% - 10px);\n    margin-bottom: 20px;\n\n    &:nth-child(odd) {\n      float: left;\n    }\n\n    &:nth-child(even) {\n      float: right;\n    }\n  }\n`;\nconst PersonTitle = styled.h2`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n    margin-bottom: 10px;\n  }\n`;\nconst PersonRole = styled.p`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst H1 = styled.h1`\n  text-transform: capitalize;\n  color: ${props => props.colour};\n  font-size: 30px;\n  line-height: 36px;\n  margin: 40px 20px 20px;\n`;\nconst P = styled.p`\n  margin: 0 20px 20px;\n`;\n\nconst NoPeopleFound = ({\n  colourHex,\n  filter\n}) => __jsx(\"main\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 3\n  }\n}, __jsx(Container, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }\n}, __jsx(H1, {\n  colour: colourHex,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 7\n  }\n}, \"No People found\"), __jsx(P, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 7\n  }\n}, \"No people matching the filter \", filter, \" found.\")));\n\nconst PeopleFilters = ({\n  colourHexLight,\n  deckColour,\n  deckParagraph,\n  deckImage,\n  acceptedFilters\n}) => __jsx(\"main\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 3\n  }\n}, __jsx(Deck, {\n  colour: deckColour,\n  text: deckParagraph,\n  image: deckImage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }\n}), __jsx(Container, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }\n}, __jsx(FilterTitle, {\n  colour: colourHexLight,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 7\n  }\n}, \"Filter By\"), __jsx(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 7\n  }\n}, acceptedFilters.map(filter => __jsx(Filter, {\n  key: filter.name,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 11\n  }\n}, __jsx(Link, {\n  href: `people?filter=${filter.name}`,\n  passHref: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 13\n  }\n}, __jsx(StyledLink, {\n  colour: filter.colour,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 15\n  }\n}, __jsx(FilterItemTitle, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 17\n  }\n}, filter.title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(FilterItemDeck, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 17\n  }\n}, filter.deck)))))), __jsx(Clearfix, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 7\n  }\n})));\n\nconst PeopleList = ({\n  colourHex,\n  people,\n  filter\n}) => __jsx(\"main\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 3\n  }\n}, __jsx(Container, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }\n}, __jsx(H1, {\n  colour: colourHex,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 7\n  }\n}, \"People: \", filter), __jsx(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 7\n  }\n}, people.map(person => __jsx(Person, {\n  key: person.data.title,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 11\n  }\n}, __jsx(Link, {\n  href: `/people/${person.data.title}`,\n  passHref: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 13\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 15\n  }\n}, __jsx(PersonBlock, {\n  colour: changeColourToHex(person.data.menuColour, true),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 17\n  }\n}, __jsx(Image, {\n  url: getFullUrl(person.data.image),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 19\n  }\n})), __jsx(PersonBlock, {\n  colour: changeColourToHex(person.data.menuColour, true),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 17\n  }\n}, __jsx(Padding, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 19\n  }\n}, __jsx(PersonTitle, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 21\n  }\n}, person.data.title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(PersonRole, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 21\n  }\n}, person.data.titleRole), __jsx(Email, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 21\n  }\n}, person.data.email))))))))));\n\nconst People = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: deckColour,\n    1: setDeckColour\n  } = useState('');\n  const {\n    0: deckImage,\n    1: setDeckImage\n  } = useState('');\n  const {\n    0: deckParagraph,\n    1: setDeckParagraph\n  } = useState('');\n  const {\n    0: people,\n    1: setPeople\n  } = useState([]);\n  const {\n    0: filter,\n    1: setFilter\n  } = useState('');\n  const {\n    0: acceptedFilters,\n    1: setAcceptedFilters\n  } = useState([]);\n  const router = useRouter();\n  useEffect(() => {\n    const {\n      query\n    } = router || {};\n    const {\n      filter\n    } = query;\n    setFilter(filter);\n    Promise.all([getData('data/peopleFilters/index.json'), getData('data/people/index.json'), getData('data/pages/people.json')]).then(([acceptedFilters, workingPeople, data]) => {\n      setTitle(data.title);\n      setImage(data.header.image);\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setDeckImage(data.deck.image && getFullUrl(data.deck.image));\n      setDeckParagraph(data.deck.paragraph);\n      setDeckColour(changeColourToHex(data.deck.colour));\n      setAcceptedFilters(Object.values(acceptedFilters).map(f => f.data || f).map(f => ({\n        name: f.name,\n        title: f.title,\n        deck: f.deck,\n        colour: changeColourToHex(f.colour, true)\n      })));\n      let people = Object.values(workingPeople) || [];\n      setPeople(people.filter(person => {\n        const {\n          data: {\n            filters: personFilters\n          }\n        } = person;\n        const keys = Object.keys(personFilters || {}).filter(key => key === filter);\n        return keys.map(key => personFilters[key]).some(personFilter => personFilter === 'true');\n      }));\n      setLoading(false);\n    });\n  }, [router]);\n  if (loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 23\n    }\n  });\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    key: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, \"People - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    title: title,\n    image: image,\n    Header: HeaderContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }\n  }), people.length > 0 && filter && __jsx(PeopleList, {\n    colourHex: colourHex,\n    people: people,\n    filter: filter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }), filter && people.length === 0 && __jsx(NoPeopleFound, {\n    colourHex: colourHex,\n    filter: filter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }), !filter && __jsx(PeopleFilters, {\n    colourHexLight: colourHexLight,\n    deckColour: deckColour,\n    deckParagraph: deckParagraph,\n    deckImage: deckImage,\n    acceptedFilters: acceptedFilters,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }), __jsx(Clearfix, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }\n  }), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default People;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/pages/people/index.js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "styled",
      "useRouter",
      "Head",
      "Link",
      "getData",
      "getMenuColour",
      "changeColourToHex",
      "getFullUrl",
      "getAllColours",
      "HeaderContainer",
      "Header",
      "Deck",
      "Footer",
      "Image",
      "Container",
      "Clearfix",
      "StyledLink",
      "a",
      "props",
      "colour",
      "FilterTitle",
      "h1",
      "FilterItemTitle",
      "h2",
      "FilterItemDeck",
      "p",
      "PersonBlock",
      "div",
      "Padding",
      "Email",
      "Filter",
      "li",
      "Person",
      "PersonTitle",
      "PersonRole",
      "H1",
      "P",
      "NoPeopleFound",
      "colourHex",
      "filter",
      "PeopleFilters",
      "colourHexLight",
      "deckColour",
      "deckParagraph",
      "deckImage",
      "acceptedFilters",
      "map",
      "name",
      "title",
      "split",
      "word",
      "toUpperCase",
      "substr",
      "join",
      "deck",
      "PeopleList",
      "people",
      "person",
      "data",
      "menuColour",
      "image",
      "titleRole",
      "email",
      "People",
      "loading",
      "setLoading",
      "setTitle",
      "setImage",
      "setColour",
      "setColourHex",
      "setColourHexLight",
      "setDeckColour",
      "setDeckImage",
      "setDeckParagraph",
      "setPeople",
      "setFilter",
      "setAcceptedFilters",
      "router",
      "query",
      "Promise",
      "all",
      "then",
      "workingPeople",
      "header",
      "paragraph",
      "Object",
      "values",
      "f",
      "filters",
      "personFilters",
      "keys",
      "key",
      "some",
      "personFilter",
      "length"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {useRouter} from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport {\n  getData,\n  getMenuColour,\n  changeColourToHex,\n  getFullUrl,\n  getAllColours\n} from '../../helpers';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport Header from '../../templates/Header';\nimport Deck from '../../components/Deck';\nimport Footer from '../../templates/Footer';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Clearfix from '../../components/Clearfix';\n\nconst StyledLink = styled.a`\n  padding: 0 30px;\n  color: white;\n  background-color: ${props => props.colour};\n  display: block;\n  height: 300px;\n`;\n\nconst FilterTitle = styled.h1`\n  font-size: 30px;\n  line-height: 76px;\n  padding: 0 30px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\n\nconst FilterItemTitle = styled.h2`\n  font-size: 30px;\n  line-height: 76px;\n`;\n\nconst FilterItemDeck = styled.p`\n  line-height: 30px;\n  padding-bottom: 20px;\n  color: white;\n\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\n\nconst PersonBlock = styled.div`\n  width: 50%;\n  float: left;\n  position: relative;\n  margin-bottom: 10px;\n  height: 200px;\n  color: white;\n  background-color: ${props => props.colour};\n`;\n\nconst Padding = styled.div`\n  padding: 20px;\n  line-height: 30px;\n`;\n\nconst Email = styled.p`\n  position: absolute;\n  bottom: 20px;\n`;\n\nconst Filter = styled.li`\n  @media screen and (min-width: 991px) {\n    width: calc(50% - 10px);\n    margin-bottom: 20px;\n\n    &:nth-child(odd) {\n      float: left;\n    }\n\n    &:nth-child(even) {\n      float: right;\n    }\n  }\n`;\n\nconst Person = styled.li`\n  @media screen and (min-width: 991px) {\n    width: calc(50% - 10px);\n    margin-bottom: 20px;\n\n    &:nth-child(odd) {\n      float: left;\n    }\n\n    &:nth-child(even) {\n      float: right;\n    }\n  }\n`;\n\nconst PersonTitle = styled.h2`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n    margin-bottom: 10px;\n  }\n`;\n\nconst PersonRole = styled.p`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\n\nconst H1 = styled.h1`\n  text-transform: capitalize;\n  color: ${props => props.colour};\n  font-size: 30px;\n  line-height: 36px;\n  margin: 40px 20px 20px;\n`;\n\nconst P = styled.p`\n  margin: 0 20px 20px;\n`;\n\nconst NoPeopleFound = ({colourHex, filter}) => (\n  <main>\n    <Container>\n      <H1 colour={colourHex}>No People found</H1>\n      <P>No people matching the filter {filter} found.</P>\n    </Container>\n  </main>\n);\n\nconst PeopleFilters = ({\n  colourHexLight,\n  deckColour,\n  deckParagraph,\n  deckImage,\n  acceptedFilters\n}) => (\n  <main>\n    <Deck colour={deckColour} text={deckParagraph} image={deckImage} />\n    <Container>\n      <FilterTitle colour={colourHexLight}>Filter By</FilterTitle>\n      <ul>\n        {acceptedFilters.map(filter => (\n          <Filter key={filter.name}>\n            <Link href={`people?filter=${filter.name}`} passHref>\n              <StyledLink colour={filter.colour}>\n                <FilterItemTitle>\n                  {filter.title\n                    .split('-')\n                    .map(word => word[0].toUpperCase() + word.substr(1))\n                    .join(' ')}\n                </FilterItemTitle>\n                <FilterItemDeck>{filter.deck}</FilterItemDeck>\n              </StyledLink>\n            </Link>\n          </Filter>\n        ))}\n      </ul>\n      <Clearfix />\n    </Container>\n  </main>\n);\n\nconst PeopleList = ({colourHex, people, filter}) => (\n  <main>\n    <Container>\n      <H1 colour={colourHex}>People: {filter}</H1>\n      <ul>\n        {people.map(person => (\n          <Person key={person.data.title}>\n            <Link href={`/people/${person.data.title}`} passHref>\n              <a>\n                <PersonBlock\n                  colour={changeColourToHex(person.data.menuColour, true)}\n                >\n                  <Image url={getFullUrl(person.data.image)} />\n                </PersonBlock>\n                <PersonBlock\n                  colour={changeColourToHex(person.data.menuColour, true)}\n                >\n                  <Padding>\n                    <PersonTitle>\n                      {person.data.title\n                        .split('-')\n                        .map(word => word[0].toUpperCase() + word.substr(1))\n                        .join(' ')}\n                    </PersonTitle>\n                    <PersonRole>{person.data.titleRole}</PersonRole>\n                    <Email>{person.data.email}</Email>\n                  </Padding>\n                </PersonBlock>\n              </a>\n            </Link>\n          </Person>\n        ))}\n      </ul>\n    </Container>\n  </main>\n);\n\nconst People = () => {\n  const [loading, setLoading] = useState(true);\n  const [title, setTitle] = useState('');\n  const [image, setImage] = useState('');\n  const [colour, setColour] = useState('');\n  const [colourHex, setColourHex] = useState('');\n  const [colourHexLight, setColourHexLight] = useState('');\n  const [deckColour, setDeckColour] = useState('');\n  const [deckImage, setDeckImage] = useState('');\n  const [deckParagraph, setDeckParagraph] = useState('');\n  const [people, setPeople] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [acceptedFilters, setAcceptedFilters] = useState([]);\n  const router = useRouter();\n\n  useEffect(() => {\n    const {query} = router || {};\n    const {filter} = query;\n    setFilter(filter);\n\n    Promise.all([\n      getData('data/peopleFilters/index.json'),\n      getData('data/people/index.json'),\n      getData('data/pages/people.json')\n    ]).then(([acceptedFilters, workingPeople, data]) => {\n      setTitle(data.title);\n      setImage(data.header.image);\n      const [colour, colourHex, colourHexLight] = getAllColours(\n        getMenuColour(data)\n      );\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setDeckImage(data.deck.image && getFullUrl(data.deck.image));\n      setDeckParagraph(data.deck.paragraph);\n\n      setDeckColour(changeColourToHex(data.deck.colour));\n\n      setAcceptedFilters(\n        Object.values(acceptedFilters)\n          .map(f => f.data || f)\n          .map(f => ({\n            name: f.name,\n            title: f.title,\n            deck: f.deck,\n            colour: changeColourToHex(f.colour, true)\n          }))\n      );\n\n      let people = Object.values(workingPeople) || [];\n\n      setPeople(\n        people.filter(person => {\n          const {\n            data: {filters: personFilters}\n          } = person;\n\n          const keys = Object.keys(personFilters || {}).filter(\n            key => key === filter\n          );\n\n          return keys\n            .map(key => personFilters[key])\n            .some(personFilter => personFilter === 'true');\n        })\n      );\n\n      setLoading(false);\n    });\n  }, [router]);\n\n  if (loading) return <div />;\n\n  return (\n    <>\n      <Head>\n        <title key=\"title\">People - Gateway Church, York</title>\n      </Head>\n      <Header\n        colour={colour}\n        colourHex={colourHex}\n        title={title}\n        image={image}\n        Header={HeaderContainer}\n      />\n      {people.length > 0 && filter && (\n        <PeopleList colourHex={colourHex} people={people} filter={filter} />\n      )}\n      {filter && people.length === 0 && (\n        <NoPeopleFound colourHex={colourHex} filter={filter} />\n      )}\n      {!filter && (\n        <PeopleFilters\n          colourHexLight={colourHexLight}\n          deckColour={deckColour}\n          deckParagraph={deckParagraph}\n          deckImage={deckImage}\n          acceptedFilters={acceptedFilters}\n        />\n      )}\n      <Clearfix />\n      <Footer />\n    </>\n  );\n};\n\nexport default People;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
