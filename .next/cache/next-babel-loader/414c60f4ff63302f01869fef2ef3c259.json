{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, useEffect } from 'react';\nimport MobileMenu from '../components/MobileMenu';\nimport Search from '../components/Search';\nimport Menu from '../components/Menu';\nimport { HideAt } from 'react-with-breakpoints';\nimport Clearfix from '../components/Clearfix';\nimport { getMenu, getFullUrl, getLogo, getResizedImageUrl } from '../helpers';\n\nvar MenuTemplate = /*#__PURE__*/function (_React$Component) {\n  _inherits(MenuTemplate, _React$Component);\n\n  var _super = _createSuper(MenuTemplate);\n\n  function MenuTemplate() {\n    var _this;\n\n    _classCallCheck(this, MenuTemplate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      menuOpen: false,\n      searchOpen: false\n    });\n\n    return _this;\n  }\n\n  _createClass(MenuTemplate, [{\n    key: \"handleMenuStateChange\",\n    value: function handleMenuStateChange(_ref) {\n      var isOpen = _ref.isOpen;\n      this.setState({\n        menuOpen: isOpen\n      });\n    }\n  }, {\n    key: \"handleSearchStateChange\",\n    value: function handleSearchStateChange(_ref2) {\n      var isOpen = _ref2.isOpen;\n      this.setState({\n        searchOpen: isOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          menuItems = _this$props.menuItems,\n          menuColour = _this$props.menuColour,\n          borderColour = _this$props.borderColour,\n          logoUrl = _this$props.logoUrl,\n          sticky = _this$props.sticky,\n          children = _this$props.children;\n      var mobileMenuItems = menuItems.reduce(function (acc, item) {\n        return item.childMenu ? [].concat(_toConsumableArray(acc), _toConsumableArray(item.childMenu)) : [].concat(_toConsumableArray(acc), [item]);\n      }, []);\n      return __jsx(React.Fragment, null, __jsx(HideAt, {\n        breakpoint: \"large\"\n      }, __jsx(MobileMenu, {\n        menuItems: mobileMenuItems,\n        menuColour: menuColour,\n        isOpen: this.state.menuOpen,\n        handleStateChange: function handleStateChange(state) {\n          _this2.handleMenuStateChange(state);\n        }\n      })), __jsx(Search, {\n        colour: menuColour,\n        borderColour: borderColour,\n        isOpen: this.state.searchOpen,\n        handleStateChange: function handleStateChange(state) {\n          _this2.handleSearchStateChange(state);\n        }\n      }), children, __jsx(Menu, {\n        menuItems: menuItems,\n        colour: menuColour,\n        logoUrl: logoUrl,\n        sticky: sticky,\n        onMenuClick: function onMenuClick() {\n          _this2.handleMenuStateChange({\n            isOpen: true\n          });\n        },\n        onSearchClick: function onSearchClick() {\n          _this2.handleSearchStateChange({\n            isOpen: true\n          });\n        }\n      }), __jsx(Clearfix, null));\n    }\n  }]);\n\n  return MenuTemplate;\n}(React.Component);\n\nvar HeaderTemplate = function HeaderTemplate(_ref3) {\n  var colour = _ref3.colour,\n      colourHex = _ref3.colourHex,\n      colourHexLight = _ref3.colourHexLight,\n      Header = _ref3.Header,\n      title = _ref3.title,\n      image = _ref3.image;\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      menu = _useState2[0],\n      setMenu = _useState2[1];\n\n  var _useState3 = useState(''),\n      logoUrl = _useState3[0],\n      setLogoUrl = _useState3[1];\n\n  useEffect(function () {\n    Promise.all([getMenu(), getLogo(colour)]).then(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          menu = _ref5[0].menu,\n          logoUrl = _ref5[1];\n\n      setMenu(menu);\n      setLogoUrl(logoUrl);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", null);\n\n  if (!title || !image) {\n    return __jsx(MenuTemplate, {\n      menuItems: menu,\n      menuColour: colourHex,\n      borderColour: colourHexLight,\n      logoUrl: logoUrl,\n      sticky: true\n    });\n  }\n\n  return __jsx(MenuTemplate, {\n    menuItems: menu,\n    menuColour: colourHex,\n    borderColour: colourHexLight,\n    logoUrl: logoUrl\n  }, __jsx(Header, {\n    text: title,\n    image: getResizedImageUrl(getFullUrl(image)),\n    colour: colourHex\n  }));\n};\n\nexport default HeaderTemplate;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
