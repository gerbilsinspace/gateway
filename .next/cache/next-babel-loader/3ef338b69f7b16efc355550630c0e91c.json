{
  "ast": null,
  "code": "var _jsxFileName = \"/home/joe/dev/gateway/components/Audio.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Sound from 'react-sound';\nimport Slider from 'rc-slider/lib/Slider';\nimport styled from 'styled-components';\nimport { getFullUrl } from '../helpers';\nimport Clearfix from '../components/Clearfix';\nconst AudioPlayer = styled.div`\n  background: ${props => props.colour};\n  margin: 100px 0;\n  padding: 20px 40px;\n`;\nconst Button = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  margin-right: 20px;\n`;\nconst SliderContainer = styled.div`\n  width: 225px;\n  margin-top: 20px;\n\n  @media screen and (min-width: 600px) {\n    margin-top: 0;\n    float: right;\n  }\n`;\nconst StyledSlider = styled(Slider)`\n  width: 150px;\n  float: right;\n  padding: 20px 0;\n\n  .rc-slider-rail {\n    background: white;\n  }\n\n  .rc-slider-track {\n    background: ${props => props.colour};\n  }\n\n  .rc-slider-handle {\n    border-color: ${props => props.colour};\n  }\n`;\nconst Download = styled.a`\n  color: ${props => props.colour};\n`;\n\nclass Audio extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      playStatus: 'STOPPED',\n      position: 0,\n      duration: 0,\n      volume: 100\n    });\n\n    _defineProperty(this, \"togglePlayPause\", () => {\n      if (this.state.playStatus === 'PLAYING') {\n        this.pressPause();\n      } else {\n        this.pressPlay();\n      }\n    });\n\n    _defineProperty(this, \"pressPlay\", () => {\n      this.setState({\n        playStatus: 'PLAYING'\n      });\n    });\n\n    _defineProperty(this, \"pressPause\", () => {\n      this.setState({\n        playStatus: 'PAUSED'\n      });\n    });\n\n    _defineProperty(this, \"pressFastForward\", () => {\n      if (this.state.position + 10000 > this.state.duration) {\n        this.setState({\n          position: this.state.duration\n        }); // lgtm [js/react/inconsistent-state-update]\n      } else {\n        this.setState({\n          position: this.state.position + 10000\n        }); // lgtm [js/react/inconsistent-state-update]\n      }\n    });\n\n    _defineProperty(this, \"pressBack\", () => {\n      if (this.state.position - 10000 < 0) {\n        this.setState({\n          position: 0\n        });\n      } else {\n        this.setState({\n          position: this.state.position - 10000\n        }); // lgtm [js/react/inconsistent-state-update]\n      }\n    });\n\n    _defineProperty(this, \"setPositionAndDuration\", ({\n      position,\n      duration\n    }) => {\n      this.setState({\n        position,\n        duration\n      });\n    });\n\n    _defineProperty(this, \"setDuration\", ({\n      duration\n    }) => {\n      this.setState({\n        duration\n      });\n    });\n\n    _defineProperty(this, \"handleVolumeChange\", volume => {\n      this.setState({\n        playStatus: 'PAUSED'\n      });\n      this.setState({\n        volume\n      });\n      this.setState({\n        playStatus: 'PLAYING'\n      });\n    });\n\n    _defineProperty(this, \"handlePlaying\", ({\n      position\n    }) => {\n      this.setState({\n        position\n      });\n    });\n\n    _defineProperty(this, \"render\", () => {\n      return __jsx(AudioPlayer, {\n        colour: this.props.colour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }\n      }, __jsx(Sound, {\n        url: this.props.url,\n        volume: this.state.volume,\n        autoLoad: true,\n        playStatus: this.state.playStatus,\n        position: this.state.position,\n        onPause: this.setPositionAndDuration,\n        onStop: this.setPositionAndDuration,\n        onLoading: this.setDuration,\n        onPlaying: this.handlePlaying,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }), __jsx(Button, {\n        onClick: this.pressBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }, __jsx(\"img\", {\n        src: getFullUrl('/uploads/rewind.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      })), __jsx(Button, {\n        onClick: this.togglePlayPause,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, this.state.playStatus === 'PLAYING' && __jsx(\"img\", {\n        src: getFullUrl('/uploads/pause.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }), this.state.playStatus === 'PAUSED' && __jsx(\"img\", {\n        src: getFullUrl('/uploads/play.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }), this.state.playStatus === 'STOPPED' && __jsx(\"img\", {\n        src: getFullUrl('/uploads/play.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      })), __jsx(Button, {\n        onClick: this.pressFastForward,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, __jsx(\"img\", {\n        src: getFullUrl('/uploads/fast-forward.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }\n      })), __jsx(Download, {\n        href: this.props.url,\n        colour: this.props.lightColour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }, __jsx(\"img\", {\n        src: getFullUrl('/uploads/download.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      })), __jsx(SliderContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }\n      }, __jsx(\"img\", {\n        src: getFullUrl('/uploads/volume.png'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }), __jsx(StyledSlider, {\n        onChange: this.handleVolumeChange,\n        defaultValue: 100,\n        colour: this.props.lightColour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }), __jsx(Clearfix, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      })), __jsx(Clearfix, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }));\n    });\n  }\n\n}\n\nexport default Audio;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/components/Audio.js"],
    "names": [
      "React",
      "Sound",
      "Slider",
      "styled",
      "getFullUrl",
      "Clearfix",
      "AudioPlayer",
      "div",
      "props",
      "colour",
      "Button",
      "button",
      "SliderContainer",
      "StyledSlider",
      "Download",
      "a",
      "Audio",
      "Component",
      "playStatus",
      "position",
      "duration",
      "volume",
      "state",
      "pressPause",
      "pressPlay",
      "setState",
      "url",
      "setPositionAndDuration",
      "setDuration",
      "handlePlaying",
      "pressBack",
      "togglePlayPause",
      "pressFastForward",
      "lightColour",
      "handleVolumeChange"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React from 'react';\nimport Sound from 'react-sound';\nimport Slider from 'rc-slider/lib/Slider';\nimport styled from 'styled-components';\nimport { getFullUrl } from '../helpers';\nimport Clearfix from '../components/Clearfix';\n\nconst AudioPlayer = styled.div`\n  background: ${props => props.colour};\n  margin: 100px 0;\n  padding: 20px 40px;\n`;\n\nconst Button = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  margin-right: 20px;\n`;\n\nconst SliderContainer = styled.div`\n  width: 225px;\n  margin-top: 20px;\n\n  @media screen and (min-width: 600px) {\n    margin-top: 0;\n    float: right;\n  }\n`;\n\nconst StyledSlider = styled(Slider)`\n  width: 150px;\n  float: right;\n  padding: 20px 0;\n\n  .rc-slider-rail {\n    background: white;\n  }\n\n  .rc-slider-track {\n    background: ${props => props.colour};\n  }\n\n  .rc-slider-handle {\n    border-color: ${props => props.colour};\n  }\n`;\n\nconst Download = styled.a`\n  color: ${props => props.colour};\n`;\n\nclass Audio extends React.Component {\n  state = {\n    playStatus: 'STOPPED',\n    position: 0,\n    duration: 0,\n    volume: 100\n  };\n\n  togglePlayPause = () => {\n    if (this.state.playStatus === 'PLAYING') {\n      this.pressPause();\n    } else {\n      this.pressPlay();\n    }\n  };\n\n  pressPlay = () => {\n    this.setState({ playStatus: 'PLAYING' });\n  };\n\n  pressPause = () => {\n    this.setState({ playStatus: 'PAUSED' });\n  };\n\n  pressFastForward = () => {\n    if (this.state.position + 10000 > this.state.duration) {\n      this.setState({ position: this.state.duration }); // lgtm [js/react/inconsistent-state-update]\n    } else {\n      this.setState({ position: this.state.position + 10000 }); // lgtm [js/react/inconsistent-state-update]\n    }\n  };\n\n  pressBack = () => {\n    if (this.state.position - 10000 < 0) {\n      this.setState({ position: 0 });\n    } else {\n      this.setState({ position: this.state.position - 10000 }); // lgtm [js/react/inconsistent-state-update]\n    }\n  };\n\n  setPositionAndDuration = ({ position, duration }) => {\n    this.setState({ position, duration });\n  };\n\n  setDuration = ({ duration }) => {\n    this.setState({ duration });\n  };\n\n  handleVolumeChange = volume => {\n    this.setState({ playStatus: 'PAUSED' });\n    this.setState({ volume });\n    this.setState({ playStatus: 'PLAYING' });\n  };\n\n  handlePlaying = ({ position }) => {\n    this.setState({ position });\n  };\n\n  render = () => {\n    return (\n      <AudioPlayer colour={this.props.colour}>\n        <Sound\n          url={this.props.url}\n          volume={this.state.volume}\n          autoLoad={true}\n          playStatus={this.state.playStatus}\n          position={this.state.position}\n          onPause={this.setPositionAndDuration}\n          onStop={this.setPositionAndDuration}\n          onLoading={this.setDuration}\n          onPlaying={this.handlePlaying}\n        />\n        <Button onClick={this.pressBack}>\n          <img src={getFullUrl('/uploads/rewind.png')} />\n        </Button>\n        <Button onClick={this.togglePlayPause}>\n          {this.state.playStatus === 'PLAYING' && (\n            <img src={getFullUrl('/uploads/pause.png')} />\n          )}\n          {this.state.playStatus === 'PAUSED' && (\n            <img src={getFullUrl('/uploads/play.png')} />\n          )}\n          {this.state.playStatus === 'STOPPED' && (\n            <img src={getFullUrl('/uploads/play.png')} />\n          )}\n        </Button>\n        <Button onClick={this.pressFastForward}>\n          <img src={getFullUrl('/uploads/fast-forward.png')} />\n        </Button>\n        <Download href={this.props.url} colour={this.props.lightColour}>\n          <img src={getFullUrl('/uploads/download.png')} />\n        </Download>\n        <SliderContainer>\n          <img src={getFullUrl('/uploads/volume.png')} />\n          <StyledSlider\n            onChange={this.handleVolumeChange}\n            defaultValue={100}\n            colour={this.props.lightColour}\n          />\n          <Clearfix />\n        </SliderContainer>\n        <Clearfix />\n      </AudioPlayer>\n    );\n  };\n}\n\nexport default Audio;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
