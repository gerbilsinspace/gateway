{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { HideAt } from 'react-with-breakpoints';\nimport { format } from 'date-fns';\nimport Header from '../templates/Header';\nimport HeaderContainer from '../components/HeaderContainer';\nimport ImageWrapper from '../components/ImageWrapper';\nimport Image from '../components/Image';\nimport Container from '../components/Container';\nimport Clearfix from '../components/Clearfix';\nimport Footer from '../templates/Footer';\nimport { getData, changeColourToHex, getMenuColour, getFullUrl, getAllColours } from '../helpers';\nconst Wrapper = styled.div`\n  padding: 20px;\n  background-color: ${props => props.colour};\n  color: #fff;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    float: right;\n    width: calc(60% - 40px);\n  }\n`;\nconst H1 = styled.h1`\n  font-size: 40px;\n  line-height: 52px;\n\n  @media screen and (min-width: 991px) {\n    font-size: 57pt;\n    line-height: 1.3em;\n  }\n`;\nconst H2 = styled.h2`\n  font-size: 30px;\n  line-height: 1.3em;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    margin-bottom: 80px;\n  }\n`;\nconst ImageAndEmailContainer = styled.div`\n  width: calc(40% - 20px);\n  margin-right: 20px;\n  float: left;\n`;\nconst ImageContainer = styled.div`\n  width: calc(40% - 20px);\n  float: left;\n  margin-right: 20px;\n`;\nconst EmailContainer = styled.div`\n  width: calc(40% - 20px);\n  float: left;\n  margin-right: 20px;\n`;\nconst Contact = styled.div`\n  @media screen and (min-width: 991px) {\n    background: ${props => props.colour}};\n    margin-top: -20px;\n    padding: 20px;\n    color: white;\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst ContactHeader = styled.p`\n  font-size: 40px;\n  line-height: 52px;\n`;\n\nconst PersonImageWrapper = ({\n  image,\n  email,\n  colour\n}) => {\n  if (email && image) {\n    return __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\"\n    }, __jsx(ImageAndEmailContainer, null, __jsx(ImageWrapper, null, __jsx(Image, {\n      url: getFullUrl(image)\n    })), __jsx(Contact, {\n      colour: colour\n    }, __jsx(ContactHeader, null, \"Contact\"), __jsx(\"p\", null, \"Email: \", email))));\n  } else if (image) {\n    return __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\"\n    }, __jsx(ImageContainer, null, __jsx(ImageWrapper, null, __jsx(Image, {\n      url: getFullUrl(image)\n    }))));\n  }\n\n  return '';\n};\n\nconst Word = styled.li`\n  background: ${prop => prop.colour};\n  color: white;\n  position: relative;\n  margin-bottom: 20px;\n`;\nconst WordLink = styled.a`\n  color: white;\n  padding: 20px 20px 0;\n  display: block;\n`;\nconst WordDate = styled.div`\n  color: ${props => props.colour};\n  display: inline-block;\n  margin-right: 20px;\n  margin-bottom: 20px;\n`;\nconst WordsTitle = styled.h2`\n  font-size: 30px;\n  line-height: 36px;\n  color: ${props => props.colour};\n  margin-top: 20px;\n  margin-bottom: 10px;\n  padding: 0 20px;\n`;\nconst WordTitle = styled.h3`\n  font-size: 30px;\n  line-height: 36px;\n  margin-bottom: 20px;\n`;\nconst WordReadMore = styled.div`\n  color: white;\n  background: ${props => props.colour};\n  padding: 20px;\n  margin-left: -20px;\n  margin-right: -20px;\n\n  @media screen and (min-width: 991px) {\n    position: absolute;\n    bottom: 0;\n    width: 50%;\n  }\n`;\nconst WordText = styled.div`\n  @media screen and (min-width: 991px) {\n    float: left;\n    width: 50%;\n    min-height: 480px;\n  }\n`;\nconst WordImage = styled.div`\n  width: 50%;\n  float: right;\n  height: 480px;\n  margin-top: -20px;\n  margin-right: -20px;\n`;\nconst PersonText = styled.div`\n  line-height: 1.5em;\n`;\n\nconst Person = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: deck,\n    1: setDeck\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: titleRole,\n    1: setTitleRole\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState('');\n  const router = useRouter();\n  const {\n    asPath\n  } = router;\n  useEffect(() => {\n    Promise.all([getData(`data${asPath.toLowerCase().split('%20').join('-')}.json`), getData(`data/words/index.json`)]).then(([data, wordsData]) => {\n      const words = data.json ? data.json.words : data.words;\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setTitle(data.title);\n      setDeck(data.deck);\n      setImage(data.image);\n      setEmail(data.email);\n      setTitleRole(data.titleRole);\n      setWords((words || []).filter(word => {\n        const name = `${word.toLowerCase().split(' ').join('-')}.json`;\n        return !!wordsData[name] && !!wordsData[name].data && !!wordsData[name].data.date;\n      }).sort((a, b) => {\n        const aName = `${a.toLowerCase().split(' ').join('-')}.json`;\n        const bName = `${b.toLowerCase().split(' ').join('-')}.json`;\n        return parseInt(wordsData[bName].data.date.split('-').join('')) - parseInt(wordsData[aName].data.date.split('-').join(''));\n      }).map(word => {\n        const wordName = `${word.toLowerCase().split(' ').join('-')}.json`;\n        return wordsData[wordName];\n      }));\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, title.split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' '), ' ', \"- Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    Header: HeaderContainer\n  }), __jsx(Container, null, __jsx(PersonImageWrapper, {\n    email: email,\n    image: image,\n    colour: colourHex\n  }), __jsx(Wrapper, {\n    colour: colourHexLight\n  }, __jsx(H1, null, title.split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(H2, null, titleRole), __jsx(PersonText, {\n    dangerouslySetInnerHTML: {\n      __html: deck\n    }\n  })), __jsx(Clearfix, null), words && words.length > 0 && __jsx(WordsTitle, {\n    colour: colourHex\n  }, \"Words\"), __jsx(\"ul\", null, words && words.map(word => {\n    const wordData = word && word.data;\n    return wordData && __jsx(Word, {\n      key: word.url,\n      colour: changeColourToHex(wordData.colour, true)\n    }, __jsx(WordLink, {\n      href: `/words/${wordData.title.split(' ').join('-').split('-').map(word => word.toLowerCase()).join('-')}`\n    }, __jsx(WordText, null, __jsx(WordDate, {\n      colour: changeColourToHex(wordData.colour)\n    }, format(wordData.date, 'EEEE do LLLL yyyy'), wordData.authors.map(({\n      author\n    }, index) => {\n      return __jsx(React.Fragment, {\n        key: author,\n        style: {\n          marginBottom: '10px',\n          marginRight: '5px',\n          display: 'inline-block'\n        }\n      }, ' - ', author.split('-').map(n => n.charAt(0).toUpperCase() + n.slice(1)).join(' '), ' ');\n    })), __jsx(WordTitle, null, wordData.title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(WordReadMore, {\n      colour: changeColourToHex(wordData.colour)\n    }, \"Read More +\")), __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\"\n    }, __jsx(WordImage, null, __jsx(ImageWrapper, null, __jsx(Image, {\n      url: getFullUrl(wordData.image)\n    })))), __jsx(Clearfix, null)));\n  }))), __jsx(Clearfix, null), __jsx(Footer, null));\n};\n\nexport default Person;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
