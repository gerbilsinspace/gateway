{
  "ast": null,
  "code": "var _jsxFileName = \"/home/joe/dev/gateway/pages/words/[id].js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { format } from 'date-fns';\nimport { markdown } from 'markdown';\nimport { getData, getMenuColour, getAllColours, getFullUrl } from '../../helpers';\nimport Header from '../../templates/Header';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport Footer from '../../templates/Footer';\nimport ImageWrapper from '../../components/ImageWrapper';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Audio from '../../components/Audio';\nimport H1 from '../../components/H1Word';\nimport H2 from '../../components/H2Word';\nimport P from '../../components/PWord';\nimport Deck from '../../components/DeckWord';\nimport StyledDate from '../../components/DateWord';\nimport Link from '../../components/LinkWord';\nconst WordText = styled.div`\n  line-height: 1.5em;\n\n  p {\n    margin-bottom: 20px;\n  }\n\n  a {\n    color: ${props => props.colour};\n  }\n`;\n\nconst Word = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: date,\n    1: setDate\n  } = useState('');\n  const {\n    0: subtitle,\n    1: setSubtitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: audioFile,\n    1: setAudioFile\n  } = useState('');\n  const {\n    0: deck,\n    1: setDeck\n  } = useState('');\n  const {\n    0: youtubeLink,\n    1: setYoutubeLink\n  } = useState('');\n  const {\n    0: file,\n    1: setFile\n  } = useState('');\n  const {\n    0: authors,\n    1: setAuthors\n  } = useState([]);\n  const {\n    0: pathname,\n    1: setPathname\n  } = useState('');\n  const router = useRouter();\n  const {\n    query: {\n      id\n    }\n  } = router;\n  useEffect(() => {\n    if (!id) return;\n    setPathname(id.split(' ').join('-').split('%20').join('-').toLowerCase());\n  }, [id]);\n  useEffect(() => {\n    if (pathname.length === 0) return;\n    const id = pathname.split(' ').join('-').split(':').join('').toLowerCase();\n    getData(`data/words/${id}.json`).then(data => {\n      let {\n        audioFile\n      } = data;\n\n      if (!audioFile || !audioFile.includes('.mp3')) {\n        audioFile = '';\n      } else {\n        audioFile = getFullUrl(audioFile);\n      }\n\n      setTitle(data.title);\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setDate(data.date);\n      setSubtitle(data.subtitle);\n      setImage(data.image);\n      setAudioFile(audioFile);\n      setDeck(data.deck);\n      setYoutubeLink(data.youtubeLink);\n      setFile(data.file);\n      setAuthors(data.authors);\n      setLoading(false);\n    });\n  }, [router, pathname]);\n  if (!id) return null;\n  if (loading) return null;\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    key: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, title, \" - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    Header: HeaderContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), __jsx(Deck, {\n    colour: colourHexLight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, __jsx(StyledDate, {\n    colour: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, date && format(date, 'EEEE do LLLL yyyy'), ' ', authors && authors.map(({\n    author\n  }) => __jsx(React.Fragment, null, ' - ', __jsx(Link, {\n    colour: colourHex,\n    href: '/people/' + author.toLowerCase().split(' ').join('-'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, author.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' '))))), __jsx(H1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, title && title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(H2, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, subtitle))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, image && __jsx(ImageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    url: getFullUrl() + image.slice(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  })), audioFile && __jsx(P, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, __jsx(Audio, {\n    url: audioFile,\n    colour: colourHex,\n    lightColour: colourHexLight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  })), file && file.endsWith('mp3') && __jsx(P, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, __jsx(Audio, {\n    url: getFullUrl(file),\n    colour: colourHex,\n    lightColour: colourHexLight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  })), deck && deck.startsWith('<') && __jsx(WordText, {\n    dangerouslySetInnerHTML: {\n      __html: deck\n    },\n    colour: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }), deck && !deck.startsWith('<') && __jsx(WordText, {\n    dangerouslySetInnerHTML: {\n      __html: markdown.toHTML(deck)\n    },\n    colour: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }), youtubeLink && __jsx(P, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, __jsx(Link, {\n    colour: colourHex,\n    href: youtubeLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, youtubeLink)), file && !file.includes('mp3') && __jsx(P, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, __jsx(Link, {\n    colour: colourHex,\n    href: getFullUrl(file),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, file.replace('/uploads/', '')))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Word;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/pages/words/[id].js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "styled",
      "useRouter",
      "Head",
      "format",
      "markdown",
      "getData",
      "getMenuColour",
      "getAllColours",
      "getFullUrl",
      "Header",
      "HeaderContainer",
      "Footer",
      "ImageWrapper",
      "Image",
      "Container",
      "Audio",
      "H1",
      "H2",
      "P",
      "Deck",
      "StyledDate",
      "Link",
      "WordText",
      "div",
      "props",
      "colour",
      "Word",
      "loading",
      "setLoading",
      "title",
      "setTitle",
      "setColour",
      "colourHex",
      "setColourHex",
      "colourHexLight",
      "setColourHexLight",
      "date",
      "setDate",
      "subtitle",
      "setSubtitle",
      "image",
      "setImage",
      "audioFile",
      "setAudioFile",
      "deck",
      "setDeck",
      "youtubeLink",
      "setYoutubeLink",
      "file",
      "setFile",
      "authors",
      "setAuthors",
      "pathname",
      "setPathname",
      "router",
      "query",
      "id",
      "split",
      "join",
      "toLowerCase",
      "length",
      "then",
      "data",
      "includes",
      "map",
      "author",
      "word",
      "toUpperCase",
      "substr",
      "slice",
      "endsWith",
      "startsWith",
      "__html",
      "toHTML",
      "replace"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {useRouter} from 'next/router';\nimport Head from 'next/head';\nimport {format} from 'date-fns';\nimport {markdown} from 'markdown';\n\nimport {getData, getMenuColour, getAllColours, getFullUrl} from '../../helpers';\nimport Header from '../../templates/Header';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport Footer from '../../templates/Footer';\nimport ImageWrapper from '../../components/ImageWrapper';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Audio from '../../components/Audio';\nimport H1 from '../../components/H1Word';\nimport H2 from '../../components/H2Word';\nimport P from '../../components/PWord';\nimport Deck from '../../components/DeckWord';\nimport StyledDate from '../../components/DateWord';\nimport Link from '../../components/LinkWord';\n\nconst WordText = styled.div`\n  line-height: 1.5em;\n\n  p {\n    margin-bottom: 20px;\n  }\n\n  a {\n    color: ${props => props.colour};\n  }\n`;\n\nconst Word = () => {\n  const [loading, setLoading] = useState(true);\n  const [title, setTitle] = useState('');\n  const [colour, setColour] = useState('');\n  const [colourHex, setColourHex] = useState('');\n  const [colourHexLight, setColourHexLight] = useState('');\n  const [date, setDate] = useState('');\n  const [subtitle, setSubtitle] = useState('');\n  const [image, setImage] = useState('');\n  const [audioFile, setAudioFile] = useState('');\n  const [deck, setDeck] = useState('');\n  const [youtubeLink, setYoutubeLink] = useState('');\n  const [file, setFile] = useState('');\n  const [authors, setAuthors] = useState([]);\n  const [pathname, setPathname] = useState('');\n  const router = useRouter();\n\n  const {\n    query: {id}\n  } = router;\n\n  useEffect(() => {\n    if (!id) return;\n\n    setPathname(\n      id\n        .split(' ')\n        .join('-')\n        .split('%20')\n        .join('-')\n        .toLowerCase()\n    );\n  }, [id]);\n\n  useEffect(() => {\n    if (pathname.length === 0) return;\n\n    const id = pathname\n      .split(' ')\n      .join('-')\n      .split(':')\n      .join('')\n      .toLowerCase();\n\n    getData(`data/words/${id}.json`).then(data => {\n      let {audioFile} = data;\n      if (!audioFile || !audioFile.includes('.mp3')) {\n        audioFile = '';\n      } else {\n        audioFile = getFullUrl(audioFile);\n      }\n      setTitle(data.title);\n      const [colour, colourHex, colourHexLight] = getAllColours(\n        getMenuColour(data)\n      );\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setDate(data.date);\n      setSubtitle(data.subtitle);\n      setImage(data.image);\n      setAudioFile(audioFile);\n      setDeck(data.deck);\n      setYoutubeLink(data.youtubeLink);\n      setFile(data.file);\n      setAuthors(data.authors);\n\n      setLoading(false);\n    });\n  }, [router, pathname]);\n\n  if (!id) return null;\n  if (loading) return null;\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title key=\"title\">{title} - Gateway Church, York</title>\n      </Head>\n      <Header\n        colour={colour}\n        colourHex={colourHex}\n        colourHexLight={colourHexLight}\n        Header={HeaderContainer}\n      />\n      <Deck colour={colourHexLight}>\n        <Container>\n          <StyledDate colour={colourHex}>\n            {date && format(date, 'EEEE do LLLL yyyy')}{' '}\n            {authors &&\n              authors.map(({author}) => (\n                <>\n                  {' - '}\n                  <Link\n                    colour={colourHex}\n                    href={\n                      '/people/' +\n                      author\n                        .toLowerCase()\n                        .split(' ')\n                        .join('-')\n                    }\n                  >\n                    {author\n                      .split('-')\n                      .map(word => word[0].toUpperCase() + word.substr(1))\n                      .join(' ')}\n                  </Link>\n                </>\n              ))}\n          </StyledDate>\n          <H1>\n            {title &&\n              title\n                .split('-')\n                .map(word => word[0].toUpperCase() + word.substr(1))\n                .join(' ')}\n          </H1>\n          <H2>{subtitle}</H2>\n        </Container>\n      </Deck>\n      <Container>\n        {image && (\n          <ImageWrapper>\n            <Image url={getFullUrl() + image.slice(1)} />\n          </ImageWrapper>\n        )}\n\n        {audioFile && (\n          <P>\n            <Audio\n              url={audioFile}\n              colour={colourHex}\n              lightColour={colourHexLight}\n            />\n          </P>\n        )}\n\n        {file && file.endsWith('mp3') && (\n          <P>\n            <Audio\n              url={getFullUrl(file)}\n              colour={colourHex}\n              lightColour={colourHexLight}\n            />\n          </P>\n        )}\n\n        {deck && deck.startsWith('<') && (\n          <WordText\n            dangerouslySetInnerHTML={{__html: deck}}\n            colour={colourHex}\n          />\n        )}\n\n        {deck && !deck.startsWith('<') && (\n          <WordText\n            dangerouslySetInnerHTML={{__html: markdown.toHTML(deck)}}\n            colour={colourHex}\n          />\n        )}\n\n        {youtubeLink && (\n          <P>\n            <Link colour={colourHex} href={youtubeLink}>\n              {youtubeLink}\n            </Link>\n          </P>\n        )}\n\n        {file && !file.includes('mp3') && (\n          <P>\n            <Link colour={colourHex} href={getFullUrl(file)}>\n              {file.replace('/uploads/', '')}\n            </Link>\n          </P>\n        )}\n      </Container>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Word;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
