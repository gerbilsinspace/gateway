{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport MobileMenu from '../components/MobileMenu';\nimport Search from '../components/Search';\nimport Menu from '../components/Menu';\nimport { HideAt } from 'react-with-breakpoints';\nimport Clearfix from '../components/Clearfix';\nimport { getMenu, getFullUrl, getLogo, getResizedImageUrl } from '../helpers';\n\nclass MenuTemplate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      menuOpen: false,\n      searchOpen: false\n    });\n  }\n\n  handleMenuStateChange({\n    isOpen\n  }) {\n    this.setState({\n      menuOpen: isOpen\n    });\n  }\n\n  handleSearchStateChange({\n    isOpen\n  }) {\n    this.setState({\n      searchOpen: isOpen\n    });\n  }\n\n  render() {\n    const {\n      menuItems,\n      menuColour,\n      borderColour,\n      logoUrl,\n      sticky,\n      children\n    } = this.props;\n    const mobileMenuItems = menuItems.reduce((acc, item) => item.childMenu ? [...acc, ...item.childMenu] : [...acc, item], []);\n    return __jsx(React.Fragment, null, __jsx(HideAt, {\n      breakpoint: \"large\"\n    }, __jsx(MobileMenu, {\n      menuItems: mobileMenuItems,\n      menuColour: menuColour,\n      isOpen: this.state.menuOpen,\n      handleStateChange: state => {\n        this.handleMenuStateChange(state);\n      }\n    })), __jsx(Search, {\n      colour: menuColour,\n      borderColour: borderColour,\n      isOpen: this.state.searchOpen,\n      handleStateChange: state => {\n        this.handleSearchStateChange(state);\n      }\n    }), children, __jsx(Menu, {\n      menuItems: menuItems,\n      colour: menuColour,\n      logoUrl: logoUrl,\n      sticky: sticky,\n      onMenuClick: () => {\n        this.handleMenuStateChange({\n          isOpen: true\n        });\n      },\n      onSearchClick: () => {\n        this.handleSearchStateChange({\n          isOpen: true\n        });\n      }\n    }), __jsx(Clearfix, null));\n  }\n\n}\n\nconst HeaderTemplate = ({\n  colour,\n  colourHex,\n  colourHexLight,\n  Header,\n  title,\n  image\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: menu,\n    1: setMenu\n  } = useState([]);\n  const {\n    0: logoUrl,\n    1: setLogoUrl\n  } = useState('');\n  useEffect(() => {\n    Promise.all([getMenu(), getLogo(colour)]).then(([{\n      menu\n    }, logoUrl]) => {\n      setMenu(menu);\n      setLogoUrl(logoUrl);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", null);\n\n  if (!title || !image) {\n    return __jsx(MenuTemplate, {\n      menuItems: menu,\n      menuColour: colourHex,\n      borderColour: colourHexLight,\n      logoUrl: logoUrl,\n      sticky: true\n    });\n  }\n\n  return __jsx(MenuTemplate, {\n    menuItems: menu,\n    menuColour: colourHex,\n    borderColour: colourHexLight,\n    logoUrl: logoUrl\n  }, __jsx(Header, {\n    text: title,\n    image: getResizedImageUrl(getFullUrl(image)),\n    colour: colourHex\n  }));\n};\n\nexport default HeaderTemplate;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/templates/Header.js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "MobileMenu",
      "Search",
      "Menu",
      "HideAt",
      "Clearfix",
      "getMenu",
      "getFullUrl",
      "getLogo",
      "getResizedImageUrl",
      "MenuTemplate",
      "Component",
      "menuOpen",
      "searchOpen",
      "handleMenuStateChange",
      "isOpen",
      "setState",
      "handleSearchStateChange",
      "render",
      "menuItems",
      "menuColour",
      "borderColour",
      "logoUrl",
      "sticky",
      "children",
      "props",
      "mobileMenuItems",
      "reduce",
      "acc",
      "item",
      "childMenu",
      "state",
      "HeaderTemplate",
      "colour",
      "colourHex",
      "colourHexLight",
      "Header",
      "title",
      "image",
      "loading",
      "setLoading",
      "menu",
      "setMenu",
      "setLogoUrl",
      "Promise",
      "all",
      "then"
    ],
    "mappings": ";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAAQC,MAAR,QAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,SAAQC,OAAR,EAAiBC,UAAjB,EAA6BC,OAA7B,EAAsCC,kBAAtC,QAA+D,YAA/D;;AAEA,MAAMC,YAAN,SAA2BZ,KAAK,CAACa,SAAjC,CAA2C;AAAA;AAAA;;AAAA,mCACjC;AACNC,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,UAAU,EAAE;AAFN,KADiC;AAAA;;AAMzCC,EAAAA,qBAAqB,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAW;AAC9B,SAAKC,QAAL,CAAc;AAACJ,MAAAA,QAAQ,EAAEG;AAAX,KAAd;AACD;;AAEDE,EAAAA,uBAAuB,CAAC;AAACF,IAAAA;AAAD,GAAD,EAAW;AAChC,SAAKC,QAAL,CAAc;AAACH,MAAAA,UAAU,EAAEE;AAAb,KAAd;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,SADI;AAEJC,MAAAA,UAFI;AAGJC,MAAAA,YAHI;AAIJC,MAAAA,OAJI;AAKJC,MAAAA,MALI;AAMJC,MAAAA;AANI,QAOF,KAAKC,KAPT;AASA,UAAMC,eAAe,GAAGP,SAAS,CAACQ,MAAV,CACtB,CAACC,GAAD,EAAMC,IAAN,KACEA,IAAI,CAACC,SAAL,GAAiB,CAAC,GAAGF,GAAJ,EAAS,GAAGC,IAAI,CAACC,SAAjB,CAAjB,GAA+C,CAAC,GAAGF,GAAJ,EAASC,IAAT,CAF3B,EAGtB,EAHsB,CAAxB;AAMA,WACE,MAAC,KAAD,CAAO,QAAP,QACE,MAAC,MAAD;AAAQ,MAAA,UAAU,EAAC;AAAnB,OACE,MAAC,UAAD;AACE,MAAA,SAAS,EAAEH,eADb;AAEE,MAAA,UAAU,EAAEN,UAFd;AAGE,MAAA,MAAM,EAAE,KAAKW,KAAL,CAAWnB,QAHrB;AAIE,MAAA,iBAAiB,EAAEmB,KAAK,IAAI;AAC1B,aAAKjB,qBAAL,CAA2BiB,KAA3B;AACD;AANH,MADF,CADF,EAWE,MAAC,MAAD;AACE,MAAA,MAAM,EAAEX,UADV;AAEE,MAAA,YAAY,EAAEC,YAFhB;AAGE,MAAA,MAAM,EAAE,KAAKU,KAAL,CAAWlB,UAHrB;AAIE,MAAA,iBAAiB,EAAEkB,KAAK,IAAI;AAC1B,aAAKd,uBAAL,CAA6Bc,KAA7B;AACD;AANH,MAXF,EAmBGP,QAnBH,EAoBE,MAAC,IAAD;AACE,MAAA,SAAS,EAAEL,SADb;AAEE,MAAA,MAAM,EAAEC,UAFV;AAGE,MAAA,OAAO,EAAEE,OAHX;AAIE,MAAA,MAAM,EAAEC,MAJV;AAKE,MAAA,WAAW,EAAE,MAAM;AACjB,aAAKT,qBAAL,CAA2B;AAACC,UAAAA,MAAM,EAAE;AAAT,SAA3B;AACD,OAPH;AAQE,MAAA,aAAa,EAAE,MAAM;AACnB,aAAKE,uBAAL,CAA6B;AAACF,UAAAA,MAAM,EAAE;AAAT,SAA7B;AACD;AAVH,MApBF,EAgCE,MAAC,QAAD,OAhCF,CADF;AAoCD;;AAlEwC;;AAqE3C,MAAMiB,cAAc,GAAG,CAAC;AACtBC,EAAAA,MADsB;AAEtBC,EAAAA,SAFsB;AAGtBC,EAAAA,cAHsB;AAItBC,EAAAA,MAJsB;AAKtBC,EAAAA,KALsB;AAMtBC,EAAAA;AANsB,CAAD,KAOjB;AACJ,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBzC,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAAC0C,IAAD;AAAA,OAAOC;AAAP,MAAkB3C,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACuB,OAAD;AAAA,OAAUqB;AAAV,MAAwB5C,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd4C,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACvC,OAAO,EAAR,EAAYE,OAAO,CAACyB,MAAD,CAAnB,CAAZ,EAA0Ca,IAA1C,CAA+C,CAAC,CAAC;AAACL,MAAAA;AAAD,KAAD,EAASnB,OAAT,CAAD,KAAuB;AACpEoB,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAE,MAAAA,UAAU,CAACrB,OAAD,CAAV;AACAkB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD;AAKD,GANQ,EAMN,EANM,CAAT;AAQA,MAAID,OAAJ,EAAa,OAAO,kBAAP;;AAEb,MAAI,CAACF,KAAD,IAAU,CAACC,KAAf,EAAsB;AACpB,WACE,MAAC,YAAD;AACE,MAAA,SAAS,EAAEG,IADb;AAEE,MAAA,UAAU,EAAEP,SAFd;AAGE,MAAA,YAAY,EAAEC,cAHhB;AAIE,MAAA,OAAO,EAAEb,OAJX;AAKE,MAAA,MAAM,EAAE;AALV,MADF;AASD;;AAED,SACE,MAAC,YAAD;AACE,IAAA,SAAS,EAAEmB,IADb;AAEE,IAAA,UAAU,EAAEP,SAFd;AAGE,IAAA,YAAY,EAAEC,cAHhB;AAIE,IAAA,OAAO,EAAEb;AAJX,KAME,MAAC,MAAD;AACE,IAAA,IAAI,EAAEe,KADR;AAEE,IAAA,KAAK,EAAE5B,kBAAkB,CAACF,UAAU,CAAC+B,KAAD,CAAX,CAF3B;AAGE,IAAA,MAAM,EAAEJ;AAHV,IANF,CADF;AAcD,CAhDD;;AAkDA,eAAeF,cAAf",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport MobileMenu from '../components/MobileMenu';\nimport Search from '../components/Search';\nimport Menu from '../components/Menu';\nimport {HideAt} from 'react-with-breakpoints';\nimport Clearfix from '../components/Clearfix';\n\nimport {getMenu, getFullUrl, getLogo, getResizedImageUrl} from '../helpers';\n\nclass MenuTemplate extends React.Component {\n  state = {\n    menuOpen: false,\n    searchOpen: false\n  };\n\n  handleMenuStateChange({isOpen}) {\n    this.setState({menuOpen: isOpen});\n  }\n\n  handleSearchStateChange({isOpen}) {\n    this.setState({searchOpen: isOpen});\n  }\n\n  render() {\n    const {\n      menuItems,\n      menuColour,\n      borderColour,\n      logoUrl,\n      sticky,\n      children\n    } = this.props;\n\n    const mobileMenuItems = menuItems.reduce(\n      (acc, item) =>\n        item.childMenu ? [...acc, ...item.childMenu] : [...acc, item],\n      []\n    );\n\n    return (\n      <React.Fragment>\n        <HideAt breakpoint=\"large\">\n          <MobileMenu\n            menuItems={mobileMenuItems}\n            menuColour={menuColour}\n            isOpen={this.state.menuOpen}\n            handleStateChange={state => {\n              this.handleMenuStateChange(state);\n            }}\n          />\n        </HideAt>\n        <Search\n          colour={menuColour}\n          borderColour={borderColour}\n          isOpen={this.state.searchOpen}\n          handleStateChange={state => {\n            this.handleSearchStateChange(state);\n          }}\n        />\n        {children}\n        <Menu\n          menuItems={menuItems}\n          colour={menuColour}\n          logoUrl={logoUrl}\n          sticky={sticky}\n          onMenuClick={() => {\n            this.handleMenuStateChange({isOpen: true});\n          }}\n          onSearchClick={() => {\n            this.handleSearchStateChange({isOpen: true});\n          }}\n        />\n        <Clearfix />\n      </React.Fragment>\n    );\n  }\n}\n\nconst HeaderTemplate = ({\n  colour,\n  colourHex,\n  colourHexLight,\n  Header,\n  title,\n  image\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [menu, setMenu] = useState([]);\n  const [logoUrl, setLogoUrl] = useState('');\n\n  useEffect(() => {\n    Promise.all([getMenu(), getLogo(colour)]).then(([{menu}, logoUrl]) => {\n      setMenu(menu);\n      setLogoUrl(logoUrl);\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) return <div />;\n\n  if (!title || !image) {\n    return (\n      <MenuTemplate\n        menuItems={menu}\n        menuColour={colourHex}\n        borderColour={colourHexLight}\n        logoUrl={logoUrl}\n        sticky={true}\n      />\n    );\n  }\n\n  return (\n    <MenuTemplate\n      menuItems={menu}\n      menuColour={colourHex}\n      borderColour={colourHexLight}\n      logoUrl={logoUrl}\n    >\n      <Header\n        text={title}\n        image={getResizedImageUrl(getFullUrl(image))}\n        colour={colourHex}\n      />\n    </MenuTemplate>\n  );\n};\n\nexport default HeaderTemplate;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
