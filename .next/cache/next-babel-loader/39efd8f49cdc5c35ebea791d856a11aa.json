{
  "ast": null,
  "code": "var _jsxFileName = \"/home/joe/dev/gateway/pages/events/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Header from '../../templates/Header';\nimport Footer from '../../templates/Footer';\nimport Container from '../../components/Container';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport Image from '../../components/Image';\nimport ImageWrapper from '../../components/ImageWrapper';\nimport PageSummary from '../../components/PageSummary';\nimport Clearfix from '../../components/Clearfix';\nimport { HideAt } from 'react-with-breakpoints';\nimport { getData, getFullUrl, getMenuColour, getAllColours } from '../../helpers';\nconst PageDeck = styled.div`\n  padding: 40px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\nconst StyledNotLink = styled.div`\n  display: inline-block;\n  margin-right: 20px;\n`;\nconst StyledLink = styled.a`\n  display: inline-block;\n  margin-right: 20px;\n  color: #fff;\n  border-bottom: 2px solid #fff;\n`;\n\nconst Pagination = ({\n  maxCount,\n  currentPage = 1\n}) => {\n  let links = [];\n\n  for (let i = 1; i < maxCount + 1; i++) {\n    links.push(i);\n  }\n\n  return links.map(link => {\n    if (link === currentPage) {\n      return __jsx(StyledNotLink, {\n        key: link,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 14\n        }\n      }, link);\n    }\n\n    if (link === 1) {\n      return __jsx(Link, {\n        href: \"events\",\n        key: link,\n        passHref: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, __jsx(StyledLink, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, link));\n    }\n\n    return __jsx(Link, {\n      href: `events?page=${link}`,\n      key: link,\n      passHref: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, __jsx(StyledLink, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, link));\n  });\n};\n\nconst StyledPagination = styled.div`\n  background: ${({\n  color\n}) => color};\n  padding: 10px 20px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  color: #fff;\n`;\nconst StyledEvent = styled.a`\n  padding: 35px;\n  background: ${props => props.color};\n  color: #fff;\n  line-height: 30px;\n  margin: 20px 0 20px;\n  display: block;\n`;\nconst P = styled.p`\n  padding: 100px 20px;\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.3em;\n  color: #fff;\n\n  @media screen and (min-width: 991px) {\n    font-size: 30px;\n    line-height: 36px;\n    padding: 100px 20%;\n  }\n`;\nconst EventLeft = styled.div`\n  @media screen and (min-width: 991px) {\n    float: left;\n    width: 60%;\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst EventRight = styled.div`\n  float: right;\n  width: 40%;\n`;\nconst EventImageWrapper = styled(ImageWrapper)`\n  margin-top: -35px;\n  margin-bottom: -35px;\n  margin-right: -35px;\n`;\nconst EventDeck = styled.div`\n  @media screen and (min-width: 991px) {\n    margin-top: 50px;\n    margin-bottom: 20px;\n  }\n`;\nconst H1 = styled.h1`\n  margin: 20px 0;\n  font-size: 30px;\n  line-height: 36px;\n`;\nconst NoEvents = styled.p`\n  margin-bottom: 20px;\n`;\n\nconst EventList = ({\n  events,\n  color\n}) => {\n  return events.map(event => {\n    const date = moment(event.dateTime).format('dddd, DD MMM YYYY');\n    const time = moment(event.dateTime).format('HH:mm');\n    const image = getFullUrl(event.image);\n    const listImage = event.listImage && getFullUrl(event.listImage);\n    const title = event.title.split('-').map(word => word[0].toUpperCase() + word.slice(1)).join(' ');\n    const id = event.title.split('?').join('');\n    return __jsx(Link, {\n      key: event.title + date + time,\n      href: `events/${id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, __jsx(StyledEvent, {\n      color: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, __jsx(EventLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, title), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, date), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, time), __jsx(EventDeck, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, event.deck), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, \"Read More +\")), __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, __jsx(EventRight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, __jsx(EventImageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    }, __jsx(Image, {\n      url: listImage || image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    })))), __jsx(Clearfix, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    })));\n  });\n};\n\nconst Events = ({\n  location = {}\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState('');\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: subtitleImage,\n    1: setSubtitleImage\n  } = useState('');\n  const {\n    0: subtitleText,\n    1: setSubtitleText\n  } = useState('');\n  const {\n    0: events,\n    1: setEvents\n  } = useState([]);\n  const {\n    0: eventCount,\n    1: setEventCount\n  } = useState(0);\n  const {\n    0: maxPageCount,\n    1: setMaxPageCount\n  } = useState(0);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: deckTitle,\n    1: setDeckTitle\n  } = useState('');\n  const {\n    0: deckParagraph,\n    1: setDeckParagraph\n  } = useState('');\n  useEffect(() => {\n    let workingCurrentPage = location.search;\n\n    if (!workingCurrentPage) {\n      workingCurrentPage = '?page=1';\n    }\n\n    setCurrentPage(parseInt(workingCurrentPage.split('page=')[1], 10));\n    Promise.all([getData('data/events/index.json'), getData('data/pages/events.json')]).then(([data, eventsPageData]) => {\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setImage(getFullUrl(eventsPageData.header.image));\n      setTitle(eventsPageData.title);\n      setSubtitleImage(getFullUrl(eventsPageData.subtitle.image));\n      setSubtitleText(eventsPageData.subtitle.subtitle);\n      setDeckTitle(eventsPageData.deck.title);\n      setDeckParagraph(eventsPageData.deck.paragraph);\n      const allEvents = Object.values(data).map(event => event.data).filter(event => event && event.dateTime && !event.draft && moment().isBefore(event.dateTime)).sort((a, b) => moment(a.dateTime).isBefore(b.dateTime) ? -1 : 1);\n      const workingEventCount = allEvents.length;\n      setEventCount(workingEventCount);\n      setEvents(allEvents.slice(currentPage * 10 - 10, currentPage * 10));\n      setMaxPageCount(Math.ceil(workingEventCount / 10));\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 23\n    }\n  });\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    key: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, \"Events - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    title: title,\n    image: image,\n    Header: HeaderContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }), eventCount === 0 && __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, __jsx(H1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, \"No events in the Calendar...\"), __jsx(NoEvents, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, \"It looks like we forgot to keep our events updated, sorry about that!\")), eventCount > 0 && __jsx(React.Fragment, null, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, subtitleImage && __jsx(ImageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 15\n    }\n  }, __jsx(Image, {\n    url: subtitleImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }\n  }), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }, __jsx(PageSummary, {\n    color: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 19\n    }\n  }, subtitleText)))), __jsx(PageDeck, {\n    colour: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, deckTitle && __jsx(H2, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 29\n    }\n  }, deckTitle), deckParagraph && __jsx(P, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 33\n    }\n  }, deckParagraph))), maxPageCount > 1 && __jsx(StyledPagination, {\n    color: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }, __jsx(Pagination, {\n    maxCount: maxPageCount,\n    currentPage: currentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  })), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, __jsx(EventList, {\n    events: events,\n    color: colourHexLight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Events;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/pages/events/index.js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "styled",
      "moment",
      "Head",
      "Link",
      "Header",
      "Footer",
      "Container",
      "HeaderContainer",
      "Image",
      "ImageWrapper",
      "PageSummary",
      "Clearfix",
      "HideAt",
      "getData",
      "getFullUrl",
      "getMenuColour",
      "getAllColours",
      "PageDeck",
      "div",
      "props",
      "colour",
      "StyledNotLink",
      "StyledLink",
      "a",
      "Pagination",
      "maxCount",
      "currentPage",
      "links",
      "i",
      "push",
      "map",
      "link",
      "StyledPagination",
      "color",
      "StyledEvent",
      "P",
      "p",
      "EventLeft",
      "EventRight",
      "EventImageWrapper",
      "EventDeck",
      "H1",
      "h1",
      "NoEvents",
      "EventList",
      "events",
      "event",
      "date",
      "dateTime",
      "format",
      "time",
      "image",
      "listImage",
      "title",
      "split",
      "word",
      "toUpperCase",
      "slice",
      "join",
      "id",
      "deck",
      "Events",
      "location",
      "loading",
      "setLoading",
      "setTitle",
      "setColour",
      "colourHex",
      "setColourHex",
      "colourHexLight",
      "setColourHexLight",
      "setImage",
      "subtitleImage",
      "setSubtitleImage",
      "subtitleText",
      "setSubtitleText",
      "setEvents",
      "eventCount",
      "setEventCount",
      "maxPageCount",
      "setMaxPageCount",
      "setCurrentPage",
      "deckTitle",
      "setDeckTitle",
      "deckParagraph",
      "setDeckParagraph",
      "workingCurrentPage",
      "search",
      "parseInt",
      "Promise",
      "all",
      "then",
      "data",
      "eventsPageData",
      "header",
      "subtitle",
      "paragraph",
      "allEvents",
      "Object",
      "values",
      "filter",
      "draft",
      "isBefore",
      "sort",
      "b",
      "workingEventCount",
      "length",
      "Math",
      "ceil"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Header from '../../templates/Header';\nimport Footer from '../../templates/Footer';\nimport Container from '../../components/Container';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport Image from '../../components/Image';\nimport ImageWrapper from '../../components/ImageWrapper';\nimport PageSummary from '../../components/PageSummary';\nimport Clearfix from '../../components/Clearfix';\nimport {HideAt} from 'react-with-breakpoints';\n\nimport {getData, getFullUrl, getMenuColour, getAllColours} from '../../helpers';\n\nconst PageDeck = styled.div`\n  padding: 40px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\n\nconst StyledNotLink = styled.div`\n  display: inline-block;\n  margin-right: 20px;\n`;\n\nconst StyledLink = styled.a`\n  display: inline-block;\n  margin-right: 20px;\n  color: #fff;\n  border-bottom: 2px solid #fff;\n`;\n\nconst Pagination = ({maxCount, currentPage = 1}) => {\n  let links = [];\n\n  for (let i = 1; i < maxCount + 1; i++) {\n    links.push(i);\n  }\n\n  return links.map(link => {\n    if (link === currentPage) {\n      return <StyledNotLink key={link}>{link}</StyledNotLink>;\n    }\n\n    if (link === 1) {\n      return (\n        <Link href=\"events\" key={link} passHref>\n          <StyledLink>{link}</StyledLink>\n        </Link>\n      );\n    }\n\n    return (\n      <Link href={`events?page=${link}`} key={link} passHref>\n        <StyledLink>{link}</StyledLink>\n      </Link>\n    );\n  });\n};\n\nconst StyledPagination = styled.div`\n  background: ${({color}) => color};\n  padding: 10px 20px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  color: #fff;\n`;\n\nconst StyledEvent = styled.a`\n  padding: 35px;\n  background: ${props => props.color};\n  color: #fff;\n  line-height: 30px;\n  margin: 20px 0 20px;\n  display: block;\n`;\n\nconst P = styled.p`\n  padding: 100px 20px;\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.3em;\n  color: #fff;\n\n  @media screen and (min-width: 991px) {\n    font-size: 30px;\n    line-height: 36px;\n    padding: 100px 20%;\n  }\n`;\n\nconst EventLeft = styled.div`\n  @media screen and (min-width: 991px) {\n    float: left;\n    width: 60%;\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\n\nconst EventRight = styled.div`\n  float: right;\n  width: 40%;\n`;\n\nconst EventImageWrapper = styled(ImageWrapper)`\n  margin-top: -35px;\n  margin-bottom: -35px;\n  margin-right: -35px;\n`;\n\nconst EventDeck = styled.div`\n  @media screen and (min-width: 991px) {\n    margin-top: 50px;\n    margin-bottom: 20px;\n  }\n`;\n\nconst H1 = styled.h1`\n  margin: 20px 0;\n  font-size: 30px;\n  line-height: 36px;\n`;\n\nconst NoEvents = styled.p`\n  margin-bottom: 20px;\n`;\n\nconst EventList = ({events, color}) => {\n  return events.map(event => {\n    const date = moment(event.dateTime).format('dddd, DD MMM YYYY');\n    const time = moment(event.dateTime).format('HH:mm');\n    const image = getFullUrl(event.image);\n    const listImage = event.listImage && getFullUrl(event.listImage);\n    const title = event.title\n      .split('-')\n      .map(word => word[0].toUpperCase() + word.slice(1))\n      .join(' ');\n    const id = event.title.split('?').join('');\n\n    return (\n      <Link key={event.title + date + time} href={`events/${id}`}>\n        <StyledEvent color={color}>\n          <EventLeft>\n            <h2>{title}</h2>\n            <div>{date}</div>\n            <div>{time}</div>\n\n            <EventDeck>{event.deck}</EventDeck>\n            <div>Read More +</div>\n          </EventLeft>\n          <HideAt breakpoint=\"mediumAndBelow\">\n            <EventRight>\n              <EventImageWrapper>\n                <Image url={listImage || image} />\n              </EventImageWrapper>\n            </EventRight>\n          </HideAt>\n          <Clearfix />\n        </StyledEvent>\n      </Link>\n    );\n  });\n};\n\nconst Events = ({location = {}}) => {\n  const [loading, setLoading] = useState('');\n  const [title, setTitle] = useState('');\n  const [colour, setColour] = useState('');\n  const [colourHex, setColourHex] = useState('');\n  const [colourHexLight, setColourHexLight] = useState('');\n  const [image, setImage] = useState('');\n  const [subtitleImage, setSubtitleImage] = useState('');\n  const [subtitleText, setSubtitleText] = useState('');\n  const [events, setEvents] = useState([]);\n  const [eventCount, setEventCount] = useState(0);\n  const [maxPageCount, setMaxPageCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [deckTitle, setDeckTitle] = useState('');\n  const [deckParagraph, setDeckParagraph] = useState('');\n\n  useEffect(() => {\n    let workingCurrentPage = location.search;\n\n    if (!workingCurrentPage) {\n      workingCurrentPage = '?page=1';\n    }\n\n    setCurrentPage(parseInt(workingCurrentPage.split('page=')[1], 10));\n\n    Promise.all([\n      getData('data/events/index.json'),\n      getData('data/pages/events.json')\n    ]).then(([data, eventsPageData]) => {\n      const [colour, colourHex, colourHexLight] = getAllColours(\n        getMenuColour(data)\n      );\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setImage(getFullUrl(eventsPageData.header.image));\n      setTitle(eventsPageData.title);\n      setSubtitleImage(getFullUrl(eventsPageData.subtitle.image));\n      setSubtitleText(eventsPageData.subtitle.subtitle);\n      setDeckTitle(eventsPageData.deck.title);\n      setDeckParagraph(eventsPageData.deck.paragraph);\n\n      const allEvents = Object.values(data)\n        .map(event => event.data)\n        .filter(\n          event =>\n            event &&\n            event.dateTime &&\n            !event.draft &&\n            moment().isBefore(event.dateTime)\n        )\n        .sort((a, b) => (moment(a.dateTime).isBefore(b.dateTime) ? -1 : 1));\n\n      const workingEventCount = allEvents.length;\n\n      setEventCount(workingEventCount);\n      setEvents(allEvents.slice(currentPage * 10 - 10, currentPage * 10));\n      setMaxPageCount(Math.ceil(workingEventCount / 10));\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) return <div />;\n  return (\n    <React.Fragment>\n      <Head>\n        <title key=\"title\">Events - Gateway Church, York</title>\n      </Head>\n      <Header\n        colour={colour}\n        colourHex={colourHex}\n        colourHexLight={colourHexLight}\n        title={title}\n        image={image}\n        Header={HeaderContainer}\n      />\n\n      {eventCount === 0 && (\n        <Container>\n          <H1>No events in the Calendar...</H1>\n          <NoEvents>\n            It looks like we forgot to keep our events updated, sorry about\n            that!\n          </NoEvents>\n        </Container>\n      )}\n\n      {eventCount > 0 && (\n        <>\n          <Container>\n            {subtitleImage && (\n              <ImageWrapper>\n                <Image url={subtitleImage} />\n                <Container>\n                  <PageSummary color={colourHex}>{subtitleText}</PageSummary>\n                </Container>\n              </ImageWrapper>\n            )}\n          </Container>\n\n          <PageDeck colour={colourHex}>\n            <Container>\n              {deckTitle && <H2>{deckTitle}</H2>}\n              {deckParagraph && <P>{deckParagraph}</P>}\n            </Container>\n          </PageDeck>\n\n          {maxPageCount > 1 && (\n            <StyledPagination color={colourHex}>\n              <Pagination maxCount={maxPageCount} currentPage={currentPage} />\n            </StyledPagination>\n          )}\n\n          <Container>\n            <EventList events={events} color={colourHexLight} />\n          </Container>\n        </>\n      )}\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Events;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
