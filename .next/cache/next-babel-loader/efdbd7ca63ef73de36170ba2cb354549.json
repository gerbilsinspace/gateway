{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  margin: 20px 0;\\n  font-size: 30px;\\n  line-height: 36px;\\n\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  @media screen and (min-width: 991px) {\\n    margin-top: 50px;\\n    margin-bottom: 20px;\\n  }\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: -35px;\\n  margin-bottom: -35px;\\n  margin-right: -35px;\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  float: right;\\n  width: 40%;\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  @media screen and (min-width: 991px) {\\n    float: left;\\n    width: 60%;\\n    font-size: 24px;\\n    line-height: 30px;\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 100px 20px;\\n  text-align: center;\\n  font-size: 24px;\\n  line-height: 1.3em;\\n  color: #fff;\\n\\n  @media screen and (min-width: 991px) {\\n    font-size: 30px;\\n    line-height: 36px;\\n    padding: 100px 20%;\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 35px;\\n  background: \", \";\\n  color: #fff;\\n  line-height: 30px;\\n  margin: 20px 0 20px;\\n  display: block;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  background: \", \";\\n  padding: 10px 20px;\\n  margin-top: 10px;\\n  margin-bottom: 10px;\\n  color: #fff;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  display: inline-block;\\n  margin-right: 20px;\\n  color: #fff;\\n  border-bottom: 2px solid #fff;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: inline-block;\\n  margin-right: 20px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 40px;\\n  background-color: \", \";\\n  color: white;\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Head from 'next/head';\nimport { Link } from '../router';\nimport Header from '../templates/Header';\nimport Footer from '../templates/Footer';\nimport Container from '../components/Container';\nimport HeaderContainer from '../components/HeaderContainer';\nimport Image from '../components/Image';\nimport ImageWrapper from '../components/ImageWrapper';\nimport PageSummary from '../components/PageSummary';\nimport Clearfix from '../components/Clearfix';\nimport { HideAt, ShowAt } from 'react-with-breakpoints';\nimport { getData, getFullUrl, getMenuColour, getAllColours } from '../helpers';\nvar PageDeck = styled.div(_templateObject(), function (props) {\n  return props.colour;\n});\nvar StyledNotLink = styled.div(_templateObject2());\nvar StyledLink = styled.a(_templateObject3());\n\nvar Pagination = function Pagination(_ref) {\n  var maxCount = _ref.maxCount,\n      _ref$currentPage = _ref.currentPage,\n      currentPage = _ref$currentPage === void 0 ? 1 : _ref$currentPage;\n  var links = [];\n\n  for (var i = 1; i < maxCount + 1; i++) {\n    links.push(i);\n  }\n\n  return links.map(function (link) {\n    if (link === currentPage) {\n      return __jsx(StyledNotLink, {\n        key: link\n      }, link);\n    }\n\n    if (link === 1) {\n      return __jsx(Link, {\n        href: \"events\",\n        key: link,\n        passHref: true\n      }, __jsx(StyledLink, null, link));\n    }\n\n    return __jsx(Link, {\n      href: \"events?page=\".concat(link),\n      key: link,\n      passHref: true\n    }, __jsx(StyledLink, null, link));\n  });\n};\n\nvar StyledPagination = styled.div(_templateObject4(), function (_ref2) {\n  var color = _ref2.color;\n  return color;\n});\nvar StyledEvent = styled.a(_templateObject5(), function (props) {\n  return props.color;\n});\nvar P = styled.p(_templateObject6());\nvar EventLeft = styled.div(_templateObject7());\nvar EventRight = styled.div(_templateObject8());\nvar EventImageWrapper = styled(ImageWrapper)(_templateObject9());\nvar EventDeck = styled.div(_templateObject10());\nvar H1 = styled.h1(_templateObject11());\nvar NoEvents = styled.p(_templateObject12());\n\nvar EventList = function EventList(_ref3) {\n  var events = _ref3.events,\n      color = _ref3.color;\n  return events.map(function (event) {\n    var date = moment(event.dateTime).format('dddd, DD MMM YYYY');\n    var time = moment(event.dateTime).format('HH:mm');\n    var image = getFullUrl(event.image);\n    var listImage = event.listImage && getFullUrl(event.listImage);\n    var title = event.title.split('-').map(function (word) {\n      return word[0].toUpperCase() + word.slice(1);\n    }).join(' ');\n    var id = event.title.split('?').join('');\n    return __jsx(Link, {\n      key: event.title + date + time,\n      route: \"event\",\n      params: {\n        id: id\n      },\n      passHref: true\n    }, __jsx(StyledEvent, {\n      color: color\n    }, __jsx(EventLeft, null, __jsx(\"h2\", null, title), __jsx(\"div\", null, date), __jsx(\"div\", null, time), __jsx(EventDeck, null, event.deck), __jsx(\"div\", null, \"Read More +\")), __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\"\n    }, __jsx(EventRight, null, __jsx(EventImageWrapper, null, __jsx(Image, {\n      url: listImage || image\n    })))), __jsx(Clearfix, null)));\n  });\n};\n\nvar Events = function Events(_ref4) {\n  var _ref4$location = _ref4.location,\n      location = _ref4$location === void 0 ? {} : _ref4$location;\n\n  var _useState = useState(''),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(''),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(''),\n      colour = _useState3[0],\n      setColour = _useState3[1];\n\n  var _useState4 = useState(''),\n      colourHex = _useState4[0],\n      setColourHex = _useState4[1];\n\n  var _useState5 = useState(''),\n      colourHexLight = _useState5[0],\n      setColourHexLight = _useState5[1];\n\n  var _useState6 = useState(''),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  var _useState7 = useState(''),\n      subtitleImage = _useState7[0],\n      setSubtitleImage = _useState7[1];\n\n  var _useState8 = useState(''),\n      subtitleText = _useState8[0],\n      setSubtitleText = _useState8[1];\n\n  var _useState9 = useState([]),\n      events = _useState9[0],\n      setEvents = _useState9[1];\n\n  var _useState10 = useState(0),\n      eventCount = _useState10[0],\n      setEventCount = _useState10[1];\n\n  var _useState11 = useState(0),\n      maxPageCount = _useState11[0],\n      setMaxPageCount = _useState11[1];\n\n  var _useState12 = useState(1),\n      currentPage = _useState12[0],\n      setCurrentPage = _useState12[1];\n\n  var _useState13 = useState(''),\n      deckTitle = _useState13[0],\n      setDeckTitle = _useState13[1];\n\n  var _useState14 = useState(''),\n      deckParagraph = _useState14[0],\n      setDeckParagraph = _useState14[1];\n\n  useEffect(function () {\n    var workingCurrentPage = location.search;\n\n    if (!workingCurrentPage) {\n      workingCurrentPage = '?page=1';\n    }\n\n    setCurrentPage(parseInt(workingCurrentPage.split('page=')[1], 10));\n    Promise.all([getData('data/events/index.json'), getData('data/pages/events.json')]).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          data = _ref6[0],\n          eventsPageData = _ref6[1];\n\n      var _getAllColours = getAllColours(getMenuColour(data)),\n          _getAllColours2 = _slicedToArray(_getAllColours, 3),\n          colour = _getAllColours2[0],\n          colourHex = _getAllColours2[1],\n          colourHexLight = _getAllColours2[2];\n\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setImage(getFullUrl(eventsPageData.header.image));\n      setTitle(eventsPageData.title);\n      setSubtitleImage(getFullUrl(eventsPageData.subtitle.image));\n      setSubtitleText(eventsPageData.subtitle.subtitle);\n      setDeckTitle(eventsPageData.deck.title);\n      setDeckParagraph(eventsPageData.deck.paragraph);\n      var allEvents = Object.values(data).map(function (event) {\n        return event.data;\n      }).filter(function (event) {\n        return event && event.dateTime && !event.draft && moment().isBefore(event.dateTime);\n      }).sort(function (a, b) {\n        return moment(a.dateTime).isBefore(b.dateTime) ? -1 : 1;\n      });\n      var workingEventCount = allEvents.length;\n      setEventCount(workingEventCount);\n      setEvents(allEvents.slice(currentPage * 10 - 10, currentPage * 10));\n      setMaxPageCount(Math.ceil(workingEventCount / 10));\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, \"Events - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    title: title,\n    image: image,\n    Header: HeaderContainer\n  }), eventCount === 0 && __jsx(Container, null, __jsx(H1, null, \"No events in the Calendar...\"), __jsx(NoEvents, null, \"It looks like we forgot to keep our events updated, sorry about that!\")), eventCount > 0 && __jsx(React.Fragment, null, __jsx(Container, null, subtitleImage && __jsx(ImageWrapper, null, __jsx(Image, {\n    url: subtitleImage\n  }), __jsx(Container, null, __jsx(PageSummary, {\n    color: colourHex\n  }, subtitleText)))), __jsx(PageDeck, {\n    colour: colourHex\n  }, __jsx(Container, null, deckTitle && __jsx(H2, null, deckTitle), deckParagraph && __jsx(P, null, deckParagraph))), maxPageCount > 1 && __jsx(StyledPagination, {\n    color: colourHex\n  }, __jsx(Pagination, {\n    maxCount: maxPageCount,\n    currentPage: currentPage\n  })), __jsx(Container, null, __jsx(EventList, {\n    events: events,\n    color: colourHexLight\n  }))), __jsx(Footer, null));\n};\n\nexport default Events;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
