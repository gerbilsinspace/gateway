{
  "ast": null,
  "code": "var _jsxFileName = \"/home/joe/dev/gateway/pages/people/[id].js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { HideAt } from 'react-with-breakpoints';\nimport { format } from 'date-fns';\nimport Header from '../../templates/Header';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport ImageWrapper from '../../components/ImageWrapper';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Clearfix from '../../components/Clearfix';\nimport Footer from '../../templates/Footer';\nimport { getData, changeColourToHex, getMenuColour, getFullUrl, getAllColours } from '../../helpers';\nconst Wrapper = styled.div`\n  padding: 20px;\n  background-color: ${props => props.colour};\n  color: #fff;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    float: right;\n    width: calc(60% - 40px);\n  }\n`;\nconst H1 = styled.h1`\n  font-size: 40px;\n  line-height: 52px;\n\n  @media screen and (min-width: 991px) {\n    font-size: 57pt;\n    line-height: 1.3em;\n  }\n`;\nconst H2 = styled.h2`\n  font-size: 30px;\n  line-height: 1.3em;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    margin-bottom: 80px;\n  }\n`;\nconst ImageAndEmailContainer = styled.div`\n  width: calc(40% - 20px);\n  margin-right: 20px;\n  float: left;\n`;\nconst ImageContainer = styled.div`\n  width: calc(40% - 20px);\n  float: left;\n  margin-right: 20px;\n`;\nconst EmailContainer = styled.div`\n  width: calc(40% - 20px);\n  float: left;\n  margin-right: 20px;\n`;\nconst Contact = styled.div`\n  @media screen and (min-width: 991px) {\n    background: ${props => props.colour}};\n    margin-top: -20px;\n    padding: 20px;\n    color: white;\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst ContactHeader = styled.p`\n  font-size: 40px;\n  line-height: 52px;\n`;\n\nconst PersonImageWrapper = ({\n  image,\n  email,\n  colour\n}) => {\n  if (email && image) {\n    return __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, __jsx(ImageAndEmailContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, __jsx(ImageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, __jsx(Image, {\n      url: getFullUrl(image),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    })), __jsx(Contact, {\n      colour: colour,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, __jsx(ContactHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"Contact\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Email: \", email))));\n  } else if (image) {\n    return __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, __jsx(ImageContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, __jsx(ImageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, __jsx(Image, {\n      url: getFullUrl(image),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  return '';\n};\n\nconst Word = styled.li`\n  background: ${prop => prop.colour};\n  color: white;\n  position: relative;\n  margin-bottom: 20px;\n`;\nconst WordLink = styled.a`\n  color: white;\n  padding: 20px 20px 0;\n  display: block;\n`;\nconst WordDate = styled.div`\n  color: ${props => props.colour};\n  display: inline-block;\n  margin-right: 20px;\n  margin-bottom: 20px;\n`;\nconst WordsTitle = styled.h2`\n  font-size: 30px;\n  line-height: 36px;\n  color: ${props => props.colour};\n  margin-top: 20px;\n  margin-bottom: 10px;\n  padding: 0 20px;\n`;\nconst WordTitle = styled.h3`\n  font-size: 30px;\n  line-height: 36px;\n  margin-bottom: 20px;\n`;\nconst WordReadMore = styled.div`\n  color: white;\n  background: ${props => props.colour};\n  padding: 20px;\n  margin-left: -20px;\n  margin-right: -20px;\n\n  @media screen and (min-width: 991px) {\n    position: absolute;\n    bottom: 0;\n    width: 50%;\n  }\n`;\nconst WordText = styled.div`\n  @media screen and (min-width: 991px) {\n    float: left;\n    width: 50%;\n    min-height: 480px;\n  }\n`;\nconst WordImage = styled.div`\n  width: 50%;\n  float: right;\n  height: 480px;\n  margin-top: -20px;\n  margin-right: -20px;\n`;\nconst PersonText = styled.div`\n  line-height: 1.5em;\n`;\n\nconst Person = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: deck,\n    1: setDeck\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: titleRole,\n    1: setTitleRole\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState('');\n  const {\n    0: pathname,\n    1: setPathname\n  } = useState('');\n  const router = useRouter();\n  const {\n    query: {\n      id\n    }\n  } = router;\n  useEffect(() => {\n    if (!id) return;\n    setPathname(id.split(' ').join('-').split('%20').join('-').toLowerCase());\n  }, [id]);\n  useEffect(() => {\n    if (pathname.length === 0) return;\n    Promise.all([getData(`data/people/${pathname.toLowerCase().split('%20').join('-')}.json`), getData(`data/words/index.json`)]).then(([data, wordsData]) => {\n      const words = data.json ? data.json.words : data.words;\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setTitle(data.title);\n      setDeck(data.deck);\n      setImage(data.image);\n      setEmail(data.email);\n      setTitleRole(data.titleRole);\n      setWords((words || []).filter(word => {\n        const name = `${word.toLowerCase().split(' ').join('-')}.json`;\n        return !!wordsData[name] && !!wordsData[name].data && !!wordsData[name].data.date;\n      }).sort((a, b) => {\n        const aName = `${a.toLowerCase().split(' ').join('-')}.json`;\n        const bName = `${b.toLowerCase().split(' ').join('-')}.json`;\n        return parseInt(wordsData[bName].data.date.split('-').join('')) - parseInt(wordsData[aName].data.date.split('-').join(''));\n      }).map(word => {\n        const wordName = `${word.toLowerCase().split(' ').join('-')}.json`;\n        return wordsData[wordName];\n      }));\n      setLoading(false);\n    });\n  }, [pathname]);\n  if (loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 23\n    }\n  });\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    key: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, title.split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' '), ' ', \"- Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    Header: HeaderContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }\n  }), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }\n  }, __jsx(PersonImageWrapper, {\n    email: email,\n    image: image,\n    colour: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }), __jsx(Wrapper, {\n    colour: colourHexLight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, __jsx(H1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }, title.split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(H2, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 11\n    }\n  }, titleRole), __jsx(PersonText, {\n    dangerouslySetInnerHTML: {\n      __html: deck\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  })), __jsx(Clearfix, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }\n  }), words && words.length > 0 && __jsx(WordsTitle, {\n    colour: colourHex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }\n  }, \"Words\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  }, words && words.map(word => {\n    const wordData = word && word.data;\n    return wordData && __jsx(Word, {\n      key: word.url,\n      colour: changeColourToHex(wordData.colour, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 19\n      }\n    }, __jsx(WordLink, {\n      href: `/words/${wordData.title.split(' ').join('-').split('-').map(word => word.toLowerCase()).join('-')}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, __jsx(WordText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 23\n      }\n    }, __jsx(WordDate, {\n      colour: changeColourToHex(wordData.colour),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 25\n      }\n    }, format(wordData.date, 'EEEE do LLLL yyyy'), wordData.authors.map(({\n      author\n    }, index) => {\n      return __jsx(React.Fragment, {\n        key: author,\n        style: {\n          marginBottom: '10px',\n          marginRight: '5px',\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 31\n        }\n      }, ' - ', author.split('-').map(n => n.charAt(0).toUpperCase() + n.slice(1)).join(' '), ' ');\n    })), __jsx(WordTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 25\n      }\n    }, wordData.title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(WordReadMore, {\n      colour: changeColourToHex(wordData.colour),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 25\n      }\n    }, \"Read More +\")), __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 23\n      }\n    }, __jsx(WordImage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 25\n      }\n    }, __jsx(ImageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 27\n      }\n    }, __jsx(Image, {\n      url: getFullUrl(wordData.image),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 29\n      }\n    })))), __jsx(Clearfix, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 23\n      }\n    })));\n  }))), __jsx(Clearfix, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }\n  }), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Person;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/pages/people/[id].js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "styled",
      "useRouter",
      "Head",
      "HideAt",
      "format",
      "Header",
      "HeaderContainer",
      "ImageWrapper",
      "Image",
      "Container",
      "Clearfix",
      "Footer",
      "getData",
      "changeColourToHex",
      "getMenuColour",
      "getFullUrl",
      "getAllColours",
      "Wrapper",
      "div",
      "props",
      "colour",
      "H1",
      "h1",
      "H2",
      "h2",
      "ImageAndEmailContainer",
      "ImageContainer",
      "EmailContainer",
      "Contact",
      "ContactHeader",
      "p",
      "PersonImageWrapper",
      "image",
      "email",
      "Word",
      "li",
      "prop",
      "WordLink",
      "a",
      "WordDate",
      "WordsTitle",
      "WordTitle",
      "h3",
      "WordReadMore",
      "WordText",
      "WordImage",
      "PersonText",
      "Person",
      "loading",
      "setLoading",
      "title",
      "setTitle",
      "setImage",
      "deck",
      "setDeck",
      "setEmail",
      "titleRole",
      "setTitleRole",
      "setColour",
      "colourHex",
      "setColourHex",
      "colourHexLight",
      "setColourHexLight",
      "words",
      "setWords",
      "pathname",
      "setPathname",
      "router",
      "query",
      "id",
      "split",
      "join",
      "toLowerCase",
      "length",
      "Promise",
      "all",
      "then",
      "data",
      "wordsData",
      "json",
      "filter",
      "word",
      "name",
      "date",
      "sort",
      "b",
      "aName",
      "bName",
      "parseInt",
      "map",
      "wordName",
      "toUpperCase",
      "substr",
      "__html",
      "wordData",
      "url",
      "authors",
      "author",
      "index",
      "marginBottom",
      "marginRight",
      "display",
      "n",
      "charAt",
      "slice"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {useRouter} from 'next/router';\nimport Head from 'next/head';\nimport {HideAt} from 'react-with-breakpoints';\nimport {format} from 'date-fns';\nimport Header from '../../templates/Header';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport ImageWrapper from '../../components/ImageWrapper';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Clearfix from '../../components/Clearfix';\nimport Footer from '../../templates/Footer';\n\nimport {\n  getData,\n  changeColourToHex,\n  getMenuColour,\n  getFullUrl,\n  getAllColours\n} from '../../helpers';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n  background-color: ${props => props.colour};\n  color: #fff;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    float: right;\n    width: calc(60% - 40px);\n  }\n`;\n\nconst H1 = styled.h1`\n  font-size: 40px;\n  line-height: 52px;\n\n  @media screen and (min-width: 991px) {\n    font-size: 57pt;\n    line-height: 1.3em;\n  }\n`;\n\nconst H2 = styled.h2`\n  font-size: 30px;\n  line-height: 1.3em;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    margin-bottom: 80px;\n  }\n`;\n\nconst ImageAndEmailContainer = styled.div`\n  width: calc(40% - 20px);\n  margin-right: 20px;\n  float: left;\n`;\n\nconst ImageContainer = styled.div`\n  width: calc(40% - 20px);\n  float: left;\n  margin-right: 20px;\n`;\n\nconst EmailContainer = styled.div`\n  width: calc(40% - 20px);\n  float: left;\n  margin-right: 20px;\n`;\n\nconst Contact = styled.div`\n  @media screen and (min-width: 991px) {\n    background: ${props => props.colour}};\n    margin-top: -20px;\n    padding: 20px;\n    color: white;\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\n\nconst ContactHeader = styled.p`\n  font-size: 40px;\n  line-height: 52px;\n`;\n\nconst PersonImageWrapper = ({image, email, colour}) => {\n  if (email && image) {\n    return (\n      <HideAt breakpoint=\"mediumAndBelow\">\n        <ImageAndEmailContainer>\n          <ImageWrapper>\n            <Image url={getFullUrl(image)} />\n          </ImageWrapper>\n          <Contact colour={colour}>\n            <ContactHeader>Contact</ContactHeader>\n            <p>Email: {email}</p>\n          </Contact>\n        </ImageAndEmailContainer>\n      </HideAt>\n    );\n  } else if (image) {\n    return (\n      <HideAt breakpoint=\"mediumAndBelow\">\n        <ImageContainer>\n          <ImageWrapper>\n            <Image url={getFullUrl(image)} />\n          </ImageWrapper>\n        </ImageContainer>\n      </HideAt>\n    );\n  }\n\n  return '';\n};\n\nconst Word = styled.li`\n  background: ${prop => prop.colour};\n  color: white;\n  position: relative;\n  margin-bottom: 20px;\n`;\n\nconst WordLink = styled.a`\n  color: white;\n  padding: 20px 20px 0;\n  display: block;\n`;\n\nconst WordDate = styled.div`\n  color: ${props => props.colour};\n  display: inline-block;\n  margin-right: 20px;\n  margin-bottom: 20px;\n`;\n\nconst WordsTitle = styled.h2`\n  font-size: 30px;\n  line-height: 36px;\n  color: ${props => props.colour};\n  margin-top: 20px;\n  margin-bottom: 10px;\n  padding: 0 20px;\n`;\n\nconst WordTitle = styled.h3`\n  font-size: 30px;\n  line-height: 36px;\n  margin-bottom: 20px;\n`;\n\nconst WordReadMore = styled.div`\n  color: white;\n  background: ${props => props.colour};\n  padding: 20px;\n  margin-left: -20px;\n  margin-right: -20px;\n\n  @media screen and (min-width: 991px) {\n    position: absolute;\n    bottom: 0;\n    width: 50%;\n  }\n`;\n\nconst WordText = styled.div`\n  @media screen and (min-width: 991px) {\n    float: left;\n    width: 50%;\n    min-height: 480px;\n  }\n`;\n\nconst WordImage = styled.div`\n  width: 50%;\n  float: right;\n  height: 480px;\n  margin-top: -20px;\n  margin-right: -20px;\n`;\n\nconst PersonText = styled.div`\n  line-height: 1.5em;\n`;\n\nconst Person = () => {\n  const [loading, setLoading] = useState(true);\n  const [title, setTitle] = useState('');\n  const [image, setImage] = useState('');\n  const [deck, setDeck] = useState('');\n  const [email, setEmail] = useState('');\n  const [titleRole, setTitleRole] = useState('');\n  const [colour, setColour] = useState('');\n  const [colourHex, setColourHex] = useState('');\n  const [colourHexLight, setColourHexLight] = useState('');\n  const [words, setWords] = useState('');\n  const [pathname, setPathname] = useState('');\n  const router = useRouter();\n\n  const {\n    query: {id}\n  } = router;\n\n  useEffect(() => {\n    if (!id) return;\n\n    setPathname(\n      id\n        .split(' ')\n        .join('-')\n        .split('%20')\n        .join('-')\n        .toLowerCase()\n    );\n  }, [id]);\n\n  useEffect(() => {\n    if (pathname.length === 0) return;\n  \n    Promise.all([\n      getData(\n        `data/people/${pathname\n          .toLowerCase()\n          .split('%20')\n          .join('-')}.json`\n      ),\n      getData(`data/words/index.json`)\n    ]).then(([data, wordsData]) => {\n      const words = data.json ? data.json.words : data.words;\n      const [colour, colourHex, colourHexLight] = getAllColours(\n        getMenuColour(data)\n      );\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setTitle(data.title);\n      setDeck(data.deck);\n      setImage(data.image);\n      setEmail(data.email);\n      setTitleRole(data.titleRole);\n\n      setWords(\n        (words || [])\n          .filter(word => {\n            const name = `${word\n              .toLowerCase()\n              .split(' ')\n              .join('-')}.json`;\n            return (\n              !!wordsData[name] &&\n              !!wordsData[name].data &&\n              !!wordsData[name].data.date\n            );\n          })\n          .sort((a, b) => {\n            const aName = `${a\n              .toLowerCase()\n              .split(' ')\n              .join('-')}.json`;\n            const bName = `${b\n              .toLowerCase()\n              .split(' ')\n              .join('-')}.json`;\n\n            return (\n              parseInt(wordsData[bName].data.date.split('-').join('')) -\n              parseInt(wordsData[aName].data.date.split('-').join(''))\n            );\n          })\n          .map(word => {\n            const wordName = `${word\n              .toLowerCase()\n              .split(' ')\n              .join('-')}.json`;\n            return wordsData[wordName];\n          })\n      );\n\n      setLoading(false);\n    });\n  }, [pathname]);\n\n  if (loading) return <div />;\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title key=\"title\">\n          {title\n            .split('-')\n            .map(word => word && word[0].toUpperCase() + word.substr(1))\n            .join(' ')}{' '}\n          - Gateway Church, York\n        </title>\n      </Head>\n      <Header\n        colour={colour}\n        colourHex={colourHex}\n        colourHexLight={colourHexLight}\n        Header={HeaderContainer}\n      />\n      <Container>\n        <PersonImageWrapper email={email} image={image} colour={colourHex} />\n        <Wrapper colour={colourHexLight}>\n          <H1>\n            {title\n              .split('-')\n              .map(word => word && word[0].toUpperCase() + word.substr(1))\n              .join(' ')}\n          </H1>\n          <H2>{titleRole}</H2>\n          <PersonText dangerouslySetInnerHTML={{__html: deck}} />\n        </Wrapper>\n\n        <Clearfix />\n        {words && words.length > 0 && (\n          <WordsTitle colour={colourHex}>Words</WordsTitle>\n        )}\n\n        <ul>\n          {words &&\n            words.map(word => {\n              const wordData = word && word.data;\n\n              return (\n                wordData && (\n                  <Word\n                    key={word.url}\n                    colour={changeColourToHex(wordData.colour, true)}\n                  >\n                    <WordLink\n                      href={`/words/${wordData.title\n                        .split(' ')\n                        .join('-')\n                        .split('-')\n                        .map(word => word.toLowerCase())\n                        .join('-')}`}\n                    >\n                      <WordText>\n                        <WordDate colour={changeColourToHex(wordData.colour)}>\n                          {format(wordData.date, 'EEEE do LLLL yyyy')}\n                          {wordData.authors.map(({author}, index) => {\n                            return (\n                              <React.Fragment\n                                key={author}\n                                style={{\n                                  marginBottom: '10px',\n                                  marginRight: '5px',\n                                  display: 'inline-block'\n                                }}\n                              >\n                                {' - '}\n                                {author\n                                  .split('-')\n                                  .map(\n                                    n => n.charAt(0).toUpperCase() + n.slice(1)\n                                  )\n                                  .join(' ')}{' '}\n                              </React.Fragment>\n                            );\n                          })}\n                        </WordDate>\n                        <WordTitle>\n                          {wordData.title\n                            .split('-')\n                            .map(word => word[0].toUpperCase() + word.substr(1))\n                            .join(' ')}\n                        </WordTitle>\n                        <WordReadMore\n                          colour={changeColourToHex(wordData.colour)}\n                        >\n                          Read More +\n                        </WordReadMore>\n                      </WordText>\n                      <HideAt breakpoint=\"mediumAndBelow\">\n                        <WordImage>\n                          <ImageWrapper>\n                            <Image url={getFullUrl(wordData.image)} />\n                          </ImageWrapper>\n                        </WordImage>\n                      </HideAt>\n                      <Clearfix />\n                    </WordLink>\n                  </Word>\n                )\n              );\n            })}\n        </ul>\n      </Container>\n      <Clearfix />\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Person;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
