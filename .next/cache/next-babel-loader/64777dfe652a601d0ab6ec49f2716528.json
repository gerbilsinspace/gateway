{
  "ast": null,
  "code": "import fetch from 'isomorphic-fetch';\nimport { url as urlStart, colours } from './config';\nexport const getAllColours = (colour = '') => {\n  const c = colours.find(c => c.name.toLowerCase() === colour.toLowerCase());\n  return c ? [c.name, c.hex, c.hexLight] : [];\n};\nexport const changeColourToHex = (colour, lightVariant) => {\n  const [, hex, hexLight] = getAllColours(colour);\n  return lightVariant ? hexLight : hex;\n};\nexport const getMenuColour = pageData => pageData.header && pageData.header.menuColour || pageData.menuColour || 'red';\nexport const getMenu = async () => {\n  const menuUrl = urlStart + 'data/menu.json';\n  const menuResponse = await fetch(menuUrl).catch(e => {\n    return e;\n  });\n  const menuData = await menuResponse.json();\n  return menuData;\n};\nexport const getFullUrl = (urlEnd = '') => {\n  if (urlEnd.includes('http')) {\n    return urlEnd;\n  }\n\n  if (urlEnd[0] === '/') {\n    urlEnd = urlEnd.replace('/', '');\n  }\n\n  return urlStart + urlEnd;\n};\nexport const getLogo = async menuColour => {\n  const logoLocation = getFullUrl(`data/logos/${menuColour || 'red'}.json`);\n  const logoResponse = await fetch(logoLocation).catch(e => {\n    return e;\n  });\n  const logoData = await logoResponse.json();\n  const logoUrl = getFullUrl(logoData.image);\n  return logoUrl;\n};\nexport const getData = async pageName => {\n  const pageUrl = urlStart + pageName;\n  const response = await fetch(pageUrl);\n\n  if (!response.ok) {\n    return new Error('something messed up');\n  }\n\n  const pageData = await response.json();\n  return pageData;\n};\nexport const getResizedImageUrl = url => {\n  if (!url) {\n    return;\n  }\n\n  const pageWidth = window.innerWidth;\n\n  if (pageWidth < 768) {\n    return url.split('uploads/').join('uploads/mobile/');\n  } else if (pageWidth < 991) {\n    return url.split('uploads/').join('uploads/tablet/');\n  }\n\n  return url.split('uploads/').join('uploads/desktop/');\n};",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/helpers/index.js"],
    "names": [
      "fetch",
      "url",
      "urlStart",
      "colours",
      "getAllColours",
      "colour",
      "c",
      "find",
      "name",
      "toLowerCase",
      "hex",
      "hexLight",
      "changeColourToHex",
      "lightVariant",
      "getMenuColour",
      "pageData",
      "header",
      "menuColour",
      "getMenu",
      "menuUrl",
      "menuResponse",
      "catch",
      "e",
      "menuData",
      "json",
      "getFullUrl",
      "urlEnd",
      "includes",
      "replace",
      "getLogo",
      "logoLocation",
      "logoResponse",
      "logoData",
      "logoUrl",
      "image",
      "getData",
      "pageName",
      "pageUrl",
      "response",
      "ok",
      "Error",
      "getResizedImageUrl",
      "pageWidth",
      "window",
      "innerWidth",
      "split",
      "join"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import fetch from 'isomorphic-fetch';\nimport {url as urlStart, colours} from './config';\n\nexport const getAllColours = (colour = '') => {\n  const c = colours.find(c => c.name.toLowerCase() === colour.toLowerCase());\n  return c ? [c.name, c.hex, c.hexLight] : [];\n};\n\nexport const changeColourToHex = (colour, lightVariant) => {\n  const [, hex, hexLight] = getAllColours(colour);\n\n  return lightVariant ? hexLight : hex;\n};\n\nexport const getMenuColour = pageData =>\n  (pageData.header && pageData.header.menuColour) ||\n  pageData.menuColour ||\n  'red';\n\nexport const getMenu = async () => {\n  const menuUrl = urlStart + 'data/menu.json';\n  const menuResponse = await fetch(menuUrl).catch(e => {\n    return e;\n  });\n  const menuData = await menuResponse.json();\n\n  return menuData;\n};\n\nexport const getFullUrl = (urlEnd = '') => {\n  if (urlEnd.includes('http')) {\n    return urlEnd;\n  }\n\n  if (urlEnd[0] === '/') {\n    urlEnd = urlEnd.replace('/', '');\n  }\n\n  return urlStart + urlEnd;\n};\n\nexport const getLogo = async menuColour => {\n  const logoLocation = getFullUrl(`data/logos/${menuColour || 'red'}.json`);\n  const logoResponse = await fetch(logoLocation).catch(e => {\n    return e;\n  });\n  const logoData = await logoResponse.json();\n  const logoUrl = getFullUrl(logoData.image);\n\n  return logoUrl;\n};\n\nexport const getData = async pageName => {\n  const pageUrl = urlStart + pageName;\n  const response = await fetch(pageUrl);\n\n  if (!response.ok) {\n    return new Error('something messed up');\n  }\n\n  const pageData = await response.json();\n\n  return pageData;\n};\n\nexport const getResizedImageUrl = url => {\n  if (!url) {\n    return;\n  }\n\n  const pageWidth = window.innerWidth;\n\n  if (pageWidth < 768) {\n    return url.split('uploads/').join('uploads/mobile/');\n  } else if (pageWidth < 991) {\n    return url.split('uploads/').join('uploads/tablet/');\n  }\n\n  return url.split('uploads/').join('uploads/desktop/');\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
