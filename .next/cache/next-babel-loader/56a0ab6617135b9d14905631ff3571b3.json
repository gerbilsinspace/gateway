{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { markdown } from 'markdown';\nimport { Router } from '../router';\nimport { url } from '../helpers/config';\nimport Header from '../templates/Header';\nimport Footer from '../templates/Footer';\nimport HeaderContainer from '../components/HeaderContainer';\nimport Image from '../components/Image';\nimport ImageWrapper from '../components/ImageWrapper';\nimport Container from '../components/Container';\nimport Clearfix from '../components/Clearfix';\nimport { getData, getMenuColour, getFullUrl, changeColourToHex, getAllColours } from '../helpers';\nconst Deck = styled.div`\n  position: relative;\n  z-index: 1;\n  padding: 35px;\n  line-height: 30px;\n  color: #fff;\n`;\nconst PageSummary = styled.div`\n  position: absolute;\n  z-index: 1;\n  text-align: center;\n  font-size: 30px;\n  line-height: 36px;\n  color: #fff;\n  height: 200px;\n  width: 100%;\n  padding: 40px 0;\n  text-align: center;\n\n  @media screen and (min-width: 991px) {\n    height: 500px;\n    padding: 175px 0 0;\n  }\n\n  @media screen and (min-width: 1021px) {\n    font-size: 90px;\n    line-height: 1.5em;\n  }\n`;\nconst PageDeck = styled.div`\n  padding: 40px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\nconst H2 = styled.h2`\n  font-size: 30px;\n  line-height: 36px;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    width: 850px;\n    margin: 0 auto 20px;\n    text-align: center;\n  }\n`;\nconst P = styled.p`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n    width: 850px;\n    margin: 0 auto;\n    text-align: center;\n  }\n`;\nconst HeaderDeck = styled.h3`\n  position: absolute;\n  z-index: 1;\n  text-align: center;\n  color: white;\n  line-height: 200px;\n  height: 200px;\n  text-align: center;\n  font-size: 50px;\n  display: block;\n  width: 100%;\n\n  @media screen and (min-width: 991px) {\n    height: 500px;\n    line-height: 500px;\n  }\n`;\nconst ContentPieceContainer = styled.div`\n  float: ${props => props.direction};\n  background-color: ${props => props.colour};\n  width: ${props => props.width ? '100%' : 0};\n  min-height: 200px;\n\n  @media screen and (min-width: 991px) {\n    width: calc(${props => props.width}% - 10px);\n    border-right: ${props => props.direction === 'left' && props.width ? '10px solid #fff' : 0};\n    border-left: ${props => props.direction === 'right' && props.width ? '10px solid #fff' : 0};\n    border-bottom: ${props => props.width ? '20px solid white' : 0};\n    height: 500px;\n  }\n\n  h2 {\n    font-size: 2em;\n    line-height: 3em;\n  }\n\n  p {\n    margin-bottom: 1em;\n  }\n\n  a {\n    color: #fff;\n    text-decoration: underline;\n  }\n`;\n\nconst ContentPiece = ({\n  direction,\n  deck,\n  image,\n  colour,\n  width\n}) => {\n  let adjustedDirection = direction;\n\n  if (image) {\n    return __jsx(ContentPieceContainer, {\n      direction: adjustedDirection,\n      colour: colour,\n      width: width\n    }, __jsx(ImageWrapper, {\n      color: colour,\n      mobileMarginBottom: \"0\"\n    }, __jsx(Image, {\n      url: getFullUrl(image)\n    }), deck && __jsx(HeaderDeck, null, deck)));\n  }\n\n  if (typeof deck === 'undefined') return __jsx(\"div\", null);\n  return __jsx(React.Fragment, null, deck && __jsx(ContentPieceContainer, {\n    direction: adjustedDirection,\n    colour: colour,\n    width: width\n  }, __jsx(Deck, {\n    dangerouslySetInnerHTML: {\n      __html: markdown.toHTML(deck)\n    }\n  })));\n};\n\nconst ContentContainer = styled.li`\n  display: block;\n  width: 100%;\n`;\nconst Iframe = styled.div`\nwidth: 100%;\n\niframe {\n  width: 100%;\n}\n`;\n\nconst setWidth = (left = {}, right = {}) => {\n  let leftWidth = 0;\n  let rightWidth = 0;\n\n  if (left.deck && right.deck) {\n    leftWidth = 50;\n    rightWidth = 50;\n  } else if (left.image && right.image) {\n    leftWidth = 50;\n    rightWidth = 50;\n  } else if (left.image && right.deck) {\n    leftWidth = 60;\n    rightWidth = 40;\n  } else if (left.deck && right.image) {\n    leftWidth = 40;\n    rightWidth = 60;\n  } else if (!left.deck && !left.image && (right.image || right.deck)) {\n    leftWidth = 0;\n    rightWidth = 100;\n  } else if (!right.deck && !right.image && (left.image || left.deck)) {\n    leftWidth = 100;\n    rightWidth = 0;\n  }\n\n  return [leftWidth, rightWidth];\n};\n\nconst Content = ({\n  content\n}) => {\n  const {\n    left = {},\n    right = {}\n  } = content;\n  const [leftWidth, rightWidth] = setWidth(left, right);\n\n  if (right.deck && right.image) {\n    return __jsx(ContentContainer, null, __jsx(ContentPiece, {\n      direction: \"right\",\n      deck: right.deck,\n      image: right.image,\n      colour: changeColourToHex(right.colour),\n      width: rightWidth\n    }), __jsx(ContentPiece, {\n      direction: \"left\",\n      deck: left.deck,\n      image: left.image,\n      colour: changeColourToHex(left.colour),\n      width: leftWidth\n    }), __jsx(Clearfix, null));\n  }\n\n  return __jsx(ContentContainer, null, __jsx(ContentPiece, {\n    direction: \"left\",\n    deck: left.deck,\n    image: left.image,\n    colour: changeColourToHex(left.colour),\n    width: leftWidth\n  }), __jsx(ContentPiece, {\n    direction: \"right\",\n    deck: right.deck,\n    image: right.image,\n    colour: changeColourToHex(right.colour),\n    width: rightWidth\n  }), __jsx(Clearfix, null));\n};\n\nconst Contents = ({\n  contents = []\n}) => __jsx(\"ul\", null, contents.map(({\n  content\n}) => {\n  if (!content) return null;\n  const left = content.left || {};\n  const leftDeck = left.deck || '';\n  const right = content.right || {};\n  const rightDeck = right.deck || '';\n  return content && __jsx(Content, {\n    content: content,\n    key: leftDeck + rightDeck\n  });\n}));\n\nconst Page = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: subtitleImage,\n    1: setSubtitleImage\n  } = useState('');\n  const {\n    0: subtitleText,\n    1: setSubtitleText\n  } = useState('');\n  const {\n    0: deckTitle,\n    1: setDeckTitle\n  } = useState('');\n  const {\n    0: deckParagraph,\n    1: setDeckParagraph\n  } = useState('');\n  const {\n    0: iframe,\n    1: setIframe\n  } = useState('');\n  const {\n    0: contents,\n    1: setContents\n  } = useState([]);\n  const router = useRouter();\n  const {\n    asPath\n  } = router;\n  useEffect(() => {\n    getData(`data/pages${asPath.split(' ').join('-').split('%20').join('-').toLowerCase()}.json`).then(data => {\n      setTitle(data.title);\n      setImage(data.header.image);\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setSubtitleText(data.subtitle.subtitle);\n      setSubtitleImage(data.subtitle && data.subtitle.image && url + data.subtitle.image.slice(1));\n      setDeckTitle(data.deck && data.deck.title);\n      setDeckParagraph(data.deck && data.deck.paragraph);\n      setContents(data.contents);\n      setIframe(data.iframe || '');\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(true);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", null);\n  if (error) return __jsx(React.Fragment, null, Router.replaceRoute('/404'));\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, title, \" - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    title: title,\n    image: image,\n    Header: HeaderContainer\n  }), __jsx(Container, null, subtitleImage && __jsx(ImageWrapper, null, __jsx(Image, {\n    url: subtitleImage\n  }), __jsx(Container, null, __jsx(PageSummary, {\n    color: colourHex\n  }, subtitleText)))), __jsx(PageDeck, {\n    colour: colourHex\n  }, __jsx(Container, null, deckTitle && __jsx(H2, null, deckTitle), deckParagraph && __jsx(P, null, deckParagraph))), __jsx(Container, null, __jsx(Contents, {\n    contents: contents\n  }), iframe && iframe.length > 0 && __jsx(Iframe, {\n    dangerouslySetInnerHTML: {\n      __html: iframe\n    }\n  })), __jsx(Footer, null));\n};\n\nexport default Page;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/pages/page.js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "styled",
      "useRouter",
      "Head",
      "markdown",
      "Router",
      "url",
      "Header",
      "Footer",
      "HeaderContainer",
      "Image",
      "ImageWrapper",
      "Container",
      "Clearfix",
      "getData",
      "getMenuColour",
      "getFullUrl",
      "changeColourToHex",
      "getAllColours",
      "Deck",
      "div",
      "PageSummary",
      "PageDeck",
      "props",
      "colour",
      "H2",
      "h2",
      "P",
      "p",
      "HeaderDeck",
      "h3",
      "ContentPieceContainer",
      "direction",
      "width",
      "ContentPiece",
      "deck",
      "image",
      "adjustedDirection",
      "__html",
      "toHTML",
      "ContentContainer",
      "li",
      "Iframe",
      "setWidth",
      "left",
      "right",
      "leftWidth",
      "rightWidth",
      "Content",
      "content",
      "Contents",
      "contents",
      "map",
      "leftDeck",
      "rightDeck",
      "Page",
      "loading",
      "setLoading",
      "error",
      "setError",
      "title",
      "setTitle",
      "setImage",
      "setColour",
      "colourHex",
      "setColourHex",
      "colourHexLight",
      "setColourHexLight",
      "subtitleImage",
      "setSubtitleImage",
      "subtitleText",
      "setSubtitleText",
      "deckTitle",
      "setDeckTitle",
      "deckParagraph",
      "setDeckParagraph",
      "iframe",
      "setIframe",
      "setContents",
      "router",
      "asPath",
      "split",
      "join",
      "toLowerCase",
      "then",
      "data",
      "header",
      "subtitle",
      "slice",
      "paragraph",
      "catch",
      "e",
      "console",
      "log",
      "replaceRoute",
      "length"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {useRouter} from 'next/router';\nimport Head from 'next/head';\nimport {markdown} from 'markdown';\nimport {Router} from '../router';\nimport {url} from '../helpers/config';\nimport Header from '../templates/Header';\nimport Footer from '../templates/Footer';\nimport HeaderContainer from '../components/HeaderContainer';\nimport Image from '../components/Image';\nimport ImageWrapper from '../components/ImageWrapper';\nimport Container from '../components/Container';\nimport Clearfix from '../components/Clearfix';\nimport {\n  getData,\n  getMenuColour,\n  getFullUrl,\n  changeColourToHex,\n  getAllColours\n} from '../helpers';\n\nconst Deck = styled.div`\n  position: relative;\n  z-index: 1;\n  padding: 35px;\n  line-height: 30px;\n  color: #fff;\n`;\n\nconst PageSummary = styled.div`\n  position: absolute;\n  z-index: 1;\n  text-align: center;\n  font-size: 30px;\n  line-height: 36px;\n  color: #fff;\n  height: 200px;\n  width: 100%;\n  padding: 40px 0;\n  text-align: center;\n\n  @media screen and (min-width: 991px) {\n    height: 500px;\n    padding: 175px 0 0;\n  }\n\n  @media screen and (min-width: 1021px) {\n    font-size: 90px;\n    line-height: 1.5em;\n  }\n`;\n\nconst PageDeck = styled.div`\n  padding: 40px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\n\nconst H2 = styled.h2`\n  font-size: 30px;\n  line-height: 36px;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    width: 850px;\n    margin: 0 auto 20px;\n    text-align: center;\n  }\n`;\n\nconst P = styled.p`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n    width: 850px;\n    margin: 0 auto;\n    text-align: center;\n  }\n`;\n\nconst HeaderDeck = styled.h3`\n  position: absolute;\n  z-index: 1;\n  text-align: center;\n  color: white;\n  line-height: 200px;\n  height: 200px;\n  text-align: center;\n  font-size: 50px;\n  display: block;\n  width: 100%;\n\n  @media screen and (min-width: 991px) {\n    height: 500px;\n    line-height: 500px;\n  }\n`;\n\nconst ContentPieceContainer = styled.div`\n  float: ${props => props.direction};\n  background-color: ${props => props.colour};\n  width: ${props => (props.width ? '100%' : 0)};\n  min-height: 200px;\n\n  @media screen and (min-width: 991px) {\n    width: calc(${props => props.width}% - 10px);\n    border-right: ${props =>\n      props.direction === 'left' && props.width ? '10px solid #fff' : 0};\n    border-left: ${props =>\n      props.direction === 'right' && props.width ? '10px solid #fff' : 0};\n    border-bottom: ${props => (props.width ? '20px solid white' : 0)};\n    height: 500px;\n  }\n\n  h2 {\n    font-size: 2em;\n    line-height: 3em;\n  }\n\n  p {\n    margin-bottom: 1em;\n  }\n\n  a {\n    color: #fff;\n    text-decoration: underline;\n  }\n`;\n\nconst ContentPiece = ({direction, deck, image, colour, width}) => {\n  let adjustedDirection = direction;\n\n  if (image) {\n    return (\n      <ContentPieceContainer\n        direction={adjustedDirection}\n        colour={colour}\n        width={width}\n      >\n        <ImageWrapper color={colour} mobileMarginBottom=\"0\">\n          <Image url={getFullUrl(image)} />\n          {deck && <HeaderDeck>{deck}</HeaderDeck>}\n        </ImageWrapper>\n      </ContentPieceContainer>\n    );\n  }\n\n  if (typeof deck === 'undefined') return <div />;\n\n  return (\n    <>\n      {deck && (\n        <ContentPieceContainer\n          direction={adjustedDirection}\n          colour={colour}\n          width={width}\n        >\n          <Deck dangerouslySetInnerHTML={{__html: markdown.toHTML(deck)}} />\n        </ContentPieceContainer>\n      )}\n    </>\n  );\n};\n\nconst ContentContainer = styled.li`\n  display: block;\n  width: 100%;\n`;\n\nconst Iframe = styled.div`\nwidth: 100%;\n\niframe {\n  width: 100%;\n}\n`;\n\nconst setWidth = (left = {}, right = {}) => {\n  let leftWidth = 0;\n  let rightWidth = 0;\n\n  if (left.deck && right.deck) {\n    leftWidth = 50;\n    rightWidth = 50;\n  } else if (left.image && right.image) {\n    leftWidth = 50;\n    rightWidth = 50;\n  } else if (left.image && right.deck) {\n    leftWidth = 60;\n    rightWidth = 40;\n  } else if (left.deck && right.image) {\n    leftWidth = 40;\n    rightWidth = 60;\n  } else if (!left.deck && !left.image && (right.image || right.deck)) {\n    leftWidth = 0;\n    rightWidth = 100;\n  } else if (!right.deck && !right.image && (left.image || left.deck)) {\n    leftWidth = 100;\n    rightWidth = 0;\n  }\n\n  return [leftWidth, rightWidth];\n};\n\nconst Content = ({content}) => {\n  const {left = {}, right = {}} = content;\n  const [leftWidth, rightWidth] = setWidth(left, right);\n\n  if (right.deck && right.image) {\n    return (\n      <ContentContainer>\n        <ContentPiece\n          direction=\"right\"\n          deck={right.deck}\n          image={right.image}\n          colour={changeColourToHex(right.colour)}\n          width={rightWidth}\n        />\n        <ContentPiece\n          direction=\"left\"\n          deck={left.deck}\n          image={left.image}\n          colour={changeColourToHex(left.colour)}\n          width={leftWidth}\n        />\n        <Clearfix />\n      </ContentContainer>\n    );\n  }\n\n  return (\n    <ContentContainer>\n      <ContentPiece\n        direction=\"left\"\n        deck={left.deck}\n        image={left.image}\n        colour={changeColourToHex(left.colour)}\n        width={leftWidth}\n      />\n      <ContentPiece\n        direction=\"right\"\n        deck={right.deck}\n        image={right.image}\n        colour={changeColourToHex(right.colour)}\n        width={rightWidth}\n      />\n      <Clearfix />\n    </ContentContainer>\n  );\n};\n\nconst Contents = ({contents = []}) => (\n  <ul>\n    {contents.map(({content}) => {\n      if (!content) return null;\n      const left = content.left || {};\n      const leftDeck = left.deck || '';\n      const right = content.right || {};\n      const rightDeck = right.deck || '';\n\n      return (\n        content && <Content content={content} key={leftDeck + rightDeck} />\n      );\n    })}\n  </ul>\n);\n\nconst Page = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [title, setTitle] = useState('');\n  const [image, setImage] = useState('');\n  const [colour, setColour] = useState('');\n  const [colourHex, setColourHex] = useState('');\n  const [colourHexLight, setColourHexLight] = useState('');\n  const [subtitleImage, setSubtitleImage] = useState('');\n  const [subtitleText, setSubtitleText] = useState('');\n  const [deckTitle, setDeckTitle] = useState('');\n  const [deckParagraph, setDeckParagraph] = useState('');\n  const [iframe, setIframe] = useState('');\n  const [contents, setContents] = useState([]);\n  const router = useRouter();\n\n  const {asPath} = router;\n\n  useEffect(() => {\n    getData(\n      `data/pages${asPath\n        .split(' ')\n        .join('-')\n        .split('%20')\n        .join('-')\n        .toLowerCase()}.json`\n    )\n      .then(data => {\n        setTitle(data.title);\n        setImage(data.header.image);\n        const [colour, colourHex, colourHexLight] = getAllColours(\n          getMenuColour(data)\n        );\n        setColour(colour);\n        setColourHex(colourHex);\n        setColourHexLight(colourHexLight);\n        setSubtitleText(data.subtitle.subtitle);\n        setSubtitleImage(\n          data.subtitle &&\n            data.subtitle.image &&\n            url + data.subtitle.image.slice(1)\n        );\n        setDeckTitle(data.deck && data.deck.title);\n        setDeckParagraph(data.deck && data.deck.paragraph);\n        setContents(data.contents);\n        setIframe(data.iframe || '');\n\n        setLoading(false);\n      })\n      .catch(e => {\n        console.log(e);\n        setError(true);\n        setLoading(false);\n      });\n  }, []);\n  if (loading) return <div />;\n\n  if (error)\n    return <React.Fragment>{Router.replaceRoute('/404')}</React.Fragment>;\n\n  return (\n    <div>\n      <Head>\n        <title key=\"title\">{title} - Gateway Church, York</title>\n      </Head>\n      <Header\n        colour={colour}\n        colourHex={colourHex}\n        colourHexLight={colourHexLight}\n        title={title}\n        image={image}\n        Header={HeaderContainer}\n      />\n      <Container>\n        {subtitleImage && (\n          <ImageWrapper>\n            <Image url={subtitleImage} />\n            <Container>\n              <PageSummary color={colourHex}>{subtitleText}</PageSummary>\n            </Container>\n          </ImageWrapper>\n        )}\n      </Container>\n\n      <PageDeck colour={colourHex}>\n        <Container>\n          {deckTitle && <H2>{deckTitle}</H2>}\n          {deckParagraph && <P>{deckParagraph}</P>}\n        </Container>\n      </PageDeck>\n\n      <Container>\n        <Contents contents={contents} />\n        {iframe && iframe.length > 0 && (\n          <Iframe dangerouslySetInnerHTML={{__html: iframe}} />\n        )}\n      </Container>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default Page;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
