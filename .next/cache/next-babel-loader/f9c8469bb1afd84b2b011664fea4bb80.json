{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { format } from 'date-fns';\nimport { markdown } from 'markdown';\nimport { getData, getMenuColour, getAllColours, getFullUrl } from '../helpers';\nimport Header from '../templates/Header';\nimport HeaderContainer from '../components/HeaderContainer';\nimport Footer from '../templates/Footer';\nimport ImageWrapper from '../components/ImageWrapper';\nimport Image from '../components/Image';\nimport Container from '../components/Container';\nimport Audio from '../components/Audio';\nimport H1 from '../components/H1Word';\nimport H2 from '../components/H2Word';\nimport P from '../components/PWord';\nimport Deck from '../components/DeckWord';\nimport StyledDate from '../components/DateWord';\nimport Link from '../components/LinkWord';\nconst WordText = styled.div`\n  line-height: 1.5em;\n\n  p {\n    margin-bottom: 20px;\n  }\n\n  a {\n    color: ${props => props.colour};\n  }\n`;\n\nconst Word = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: date,\n    1: setDate\n  } = useState('');\n  const {\n    0: subtitle,\n    1: setSubtitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: audioFile,\n    1: setAudioFile\n  } = useState('');\n  const {\n    0: deck,\n    1: setDeck\n  } = useState('');\n  const {\n    0: youtubeLink,\n    1: setYoutubeLink\n  } = useState('');\n  const {\n    0: file,\n    1: setFile\n  } = useState('');\n  const {\n    0: authors,\n    1: setAuthors\n  } = useState([]);\n  const router = useRouter();\n  useEffect(() => {\n    const {\n      asPath\n    } = router;\n    const id = asPath.split(' ').join('-').split(':').join('').toLowerCase();\n    getData(`data${id}.json`).then(data => {\n      let {\n        audioFile\n      } = data;\n\n      if (!audioFile || !audioFile.includes('.mp3')) {\n        audioFile = '';\n      } else {\n        audioFile = getFullUrl(audioFile);\n      }\n\n      setTitle(data.title);\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setDate(data.date);\n      setSubtitle(data.subtitle);\n      setImage(data.image);\n      setAudioFile(audioFile);\n      setDeck(data.deck);\n      setYoutubeLink(data.youtubeLink);\n      setFile(data.file);\n      setAuthors(data.authors);\n      setLoading(false);\n    });\n  }, [router]);\n\n  if (loading) {\n    return __jsx(\"div\", null);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, title, \" - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    Header: HeaderContainer\n  }), __jsx(Deck, {\n    colour: colourHexLight\n  }, __jsx(Container, null, __jsx(StyledDate, {\n    colour: colourHex\n  }, date && format(date, 'EEEE do LLLL yyyy'), ' ', authors && authors.map(({\n    author\n  }) => __jsx(React.Fragment, null, ' - ', __jsx(Link, {\n    colour: colourHex,\n    href: '/people/' + author.toLowerCase().split(' ').join('-')\n  }, author.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' '))))), __jsx(H1, null, title && title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(H2, null, subtitle))), __jsx(Container, null, image && __jsx(ImageWrapper, null, __jsx(Image, {\n    url: getFullUrl() + image.slice(1)\n  })), audioFile && __jsx(P, null, __jsx(Audio, {\n    url: audioFile,\n    colour: colourHex,\n    lightColour: colourHexLight\n  })), file && file.endsWith('mp3') && __jsx(P, null, __jsx(Audio, {\n    url: getFullUrl(file),\n    colour: colourHex,\n    lightColour: colourHexLight\n  })), deck && deck.startsWith('<') && __jsx(WordText, {\n    dangerouslySetInnerHTML: {\n      __html: deck\n    },\n    colour: colourHex\n  }), deck && !deck.startsWith('<') && __jsx(WordText, {\n    dangerouslySetInnerHTML: {\n      __html: markdown.toHTML(deck)\n    },\n    colour: colourHex\n  }), youtubeLink && __jsx(P, null, __jsx(Link, {\n    colour: colourHex,\n    href: youtubeLink\n  }, youtubeLink)), file && !file.includes('mp3') && __jsx(P, null, __jsx(Link, {\n    colour: colourHex,\n    href: getFullUrl(file)\n  }, file.replace('/uploads/', '')))), __jsx(Footer, null));\n};\n\nexport default Word;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
