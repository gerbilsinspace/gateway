{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Sound from 'react-sound';\nimport Slider from 'rc-slider/lib/Slider';\nimport styled from 'styled-components';\nimport { getFullUrl } from '../helpers';\nimport Clearfix from '../components/Clearfix';\nconst AudioPlayer = styled.div`\n  background: ${props => props.colour};\n  margin: 100px 0;\n  padding: 20px 40px;\n`;\nconst Button = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  margin-right: 20px;\n`;\nconst SliderContainer = styled.div`\n  width: 225px;\n  margin-top: 20px;\n\n  @media screen and (min-width: 600px) {\n    margin-top: 0;\n    float: right;\n  }\n`;\nconst StyledSlider = styled(Slider)`\n  width: 150px;\n  float: right;\n  padding: 20px 0;\n\n  .rc-slider-rail {\n    background: white;\n  }\n\n  .rc-slider-track {\n    background: ${props => props.colour};\n  }\n\n  .rc-slider-handle {\n    border-color: ${props => props.colour};\n  }\n`;\nconst Download = styled.a`\n  color: ${props => props.colour};\n`;\n\nclass Audio extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      playStatus: 'STOPPED',\n      position: 0,\n      duration: 0,\n      volume: 100\n    });\n\n    _defineProperty(this, \"togglePlayPause\", () => {\n      if (this.state.playStatus === 'PLAYING') {\n        this.pressPause();\n      } else {\n        this.pressPlay();\n      }\n    });\n\n    _defineProperty(this, \"pressPlay\", () => {\n      this.setState({\n        playStatus: 'PLAYING'\n      });\n    });\n\n    _defineProperty(this, \"pressPause\", () => {\n      this.setState({\n        playStatus: 'PAUSED'\n      });\n    });\n\n    _defineProperty(this, \"pressFastForward\", () => {\n      if (this.state.position + 10000 > this.state.duration) {\n        this.setState({\n          position: this.state.duration\n        }); // lgtm [js/react/inconsistent-state-update]\n      } else {\n        this.setState({\n          position: this.state.position + 10000\n        }); // lgtm [js/react/inconsistent-state-update]\n      }\n    });\n\n    _defineProperty(this, \"pressBack\", () => {\n      if (this.state.position - 10000 < 0) {\n        this.setState({\n          position: 0\n        });\n      } else {\n        this.setState({\n          position: this.state.position - 10000\n        }); // lgtm [js/react/inconsistent-state-update]\n      }\n    });\n\n    _defineProperty(this, \"setPositionAndDuration\", ({\n      position,\n      duration\n    }) => {\n      this.setState({\n        position,\n        duration\n      });\n    });\n\n    _defineProperty(this, \"setDuration\", ({\n      duration\n    }) => {\n      this.setState({\n        duration\n      });\n    });\n\n    _defineProperty(this, \"handleVolumeChange\", volume => {\n      this.setState({\n        playStatus: 'PAUSED'\n      });\n      this.setState({\n        volume\n      });\n      this.setState({\n        playStatus: 'PLAYING'\n      });\n    });\n\n    _defineProperty(this, \"handlePlaying\", ({\n      position\n    }) => {\n      this.setState({\n        position\n      });\n    });\n\n    _defineProperty(this, \"render\", () => {\n      return __jsx(AudioPlayer, {\n        colour: this.props.colour\n      }, __jsx(Sound, {\n        url: this.props.url,\n        volume: this.state.volume,\n        autoLoad: true,\n        playStatus: this.state.playStatus,\n        position: this.state.position,\n        onPause: this.setPositionAndDuration,\n        onStop: this.setPositionAndDuration,\n        onLoading: this.setDuration,\n        onPlaying: this.handlePlaying\n      }), __jsx(Button, {\n        onClick: this.pressBack\n      }, __jsx(\"img\", {\n        src: getFullUrl('/uploads/rewind.png')\n      })), __jsx(Button, {\n        onClick: this.togglePlayPause\n      }, this.state.playStatus === 'PLAYING' && __jsx(\"img\", {\n        src: getFullUrl('/uploads/pause.png')\n      }), this.state.playStatus === 'PAUSED' && __jsx(\"img\", {\n        src: getFullUrl('/uploads/play.png')\n      }), this.state.playStatus === 'STOPPED' && __jsx(\"img\", {\n        src: getFullUrl('/uploads/play.png')\n      })), __jsx(Button, {\n        onClick: this.pressFastForward\n      }, __jsx(\"img\", {\n        src: getFullUrl('/uploads/fast-forward.png')\n      })), __jsx(Download, {\n        href: this.props.url,\n        colour: this.props.lightColour\n      }, __jsx(\"img\", {\n        src: getFullUrl('/uploads/download.png')\n      })), __jsx(SliderContainer, null, __jsx(\"img\", {\n        src: getFullUrl('/uploads/volume.png')\n      }), __jsx(StyledSlider, {\n        onChange: this.handleVolumeChange,\n        defaultValue: 100,\n        colour: this.props.lightColour\n      }), __jsx(Clearfix, null)), __jsx(Clearfix, null));\n    });\n  }\n\n}\n\nexport default Audio;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
