{
  "ast": null,
  "code": "import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  background: \", \";\\n  color: white;\\n  border: 0;\\n  font-size: 20px;\\n  border-bottom: 3px solid \", \";\\n  font-family: 'Ginger', sans-serif;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  padding: 20px 25px;\\n  display: inline-block;\\n  text-decoration: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { slide as SlideMenu } from 'react-burger-menu';\nimport Async from 'react-promise';\nimport Downshift from 'downshift';\nimport flat from 'flat';\nimport Link from 'next/link';\nimport { getData } from '../helpers';\nvar StyledLink = styled.a(_templateObject());\nvar StyledSearchInput = styled.input(_templateObject2(), function (props) {\n  return props.colour;\n}, function (props) {\n  return props.borderColour;\n});\n\nvar SearchInput = function SearchInput(props) {\n  return __jsx(StyledSearchInput, _extends({}, props, {\n    type: \"text\"\n  }));\n};\n\nvar SearchListItem = function SearchListItem(_ref) {\n  var item = _ref.item,\n      getItemProps = _ref.getItemProps;\n  return __jsx(\"li\", getItemProps({\n    key: item.data.title,\n    item: item\n  }), __jsx(Link, {\n    href: \"/\".concat(item.pageUrl)\n  }, __jsx(StyledLink, null, __jsx(\"div\", null, item.data.title.split('-').map(function (word) {\n    return word && word[0].toUpperCase() + word.substr(1);\n  }).join(' ')), __jsx(\"div\", null, item.breadcrumb.split(' - ').join('___').split('-').map(function (word) {\n    return word && word[0].toUpperCase() + word.substr(1);\n  }).join(' ').split('___').map(function (word) {\n    return word && word[0].toUpperCase() + word.substr(1);\n  }).join(' - ')))));\n};\n\nvar blackList = ['audioFile', 'colour', 'date', 'email', 'file', 'filters', 'time', 'titleRole', 'image', 'menuColour', 'optionalContent', 'phoneNumber', 'youtubeLink'];\n\nvar setStyles = function setStyles(colour) {\n  return {\n    bmBurgerButton: {\n      display: 'none'\n    },\n    bmBurgerBars: {\n      background: colour,\n      height: '3px'\n    },\n    bmCrossButton: {\n      height: '24px',\n      width: '24px'\n    },\n    bmCross: {\n      background: 'white'\n    },\n    bmMenu: {\n      background: colour,\n      padding: '2.5em 1.5em 0',\n      fontSize: '1.15em'\n    },\n    bmMorphShape: {\n      fill: '#373a47'\n    },\n    bmItemList: {\n      color: 'white',\n      padding: '0.8em'\n    },\n    bmItem: {\n      display: 'inline-block'\n    },\n    bmOverlay: {\n      background: 'rgba(0, 0, 0, 0.2)'\n    }\n  };\n};\n\nvar Search = function Search(_ref2) {\n  var colour = _ref2.colour,\n      isOpen = _ref2.isOpen,\n      handleStateChange = _ref2.handleStateChange,\n      borderColour = _ref2.borderColour;\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      searchData = _useState2[0],\n      setSearchData = _useState2[1];\n\n  useEffect(function () {\n    getData('data/search/index.json').then(function (data) {\n      data.forEach(function (item, index) {\n        var flattened = Object.entries(flat(item.data));\n        var filtered = flattened.reduce(function (acc, item) {\n          var inBlackList = blackList.some(function (blackListItem) {\n            return item[0].includes(blackListItem);\n          });\n          return inBlackList ? acc : [].concat(_toConsumableArray(acc), [item]);\n        }, []);\n        data[index].flat = filtered;\n        var pageUrl = data[index].url.slice(0, -5).split('data/')[1];\n        data[index].pageUrl = pageUrl;\n        var breadcrumb = pageUrl.split('/').join(' - ');\n        data[index].breadcrumb = breadcrumb;\n        setSearchData(data);\n        setLoading(false);\n      });\n    });\n  }, []);\n  var styles = setStyles(colour);\n\n  var onSearch = function onSearch(data, inputValue) {\n    return data.filter(function (item) {\n      return item.flat.some(function (flatItem) {\n        return flatItem && flatItem[1] && typeof flatItem[1] !== 'object' && !Array.isArray(flatItem[1]) && typeof flatItem[1] !== 'boolean' && typeof flatItem[1] !== 'number' && flatItem[1].toLowerCase().includes(inputValue.toLowerCase());\n      });\n    });\n  };\n\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(SlideMenu, {\n    styles: styles,\n    right: true,\n    isOpen: isOpen,\n    onStateChange: handleStateChange\n  }, __jsx(Downshift, {\n    itemToString: function itemToString(item) {\n      return '';\n    }\n  }, function (props) {\n    var getInputProps = props.getInputProps,\n        getMenuProps = props.getMenuProps,\n        getItemProps = props.getItemProps,\n        inputValue = props.inputValue;\n    return __jsx(\"div\", null, __jsx(SearchInput, _extends({}, getInputProps(), {\n      colour: colour,\n      borderColour: borderColour\n    })), isOpen && !!inputValue.length && __jsx(\"ul\", getMenuProps(), onSearch(searchData, inputValue).filter(function (item) {\n      if (item.type !== 'people') return true;\n      if (!item.data.filters.all) return false;\n      if (item.data.filters.all === 'false') return false;\n      return true;\n    }).map(function (item) {\n      return __jsx(SearchListItem, {\n        item: item,\n        getItemProps: getItemProps\n      });\n    })));\n  }));\n};\n\nexport default Search;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
