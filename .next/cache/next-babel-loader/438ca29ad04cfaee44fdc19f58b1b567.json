{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport MobileMenu from '../components/MobileMenu';\nimport Search from '../components/Search';\nimport Menu from '../components/Menu';\nimport { HideAt } from 'react-with-breakpoints';\nimport Clearfix from '../components/Clearfix';\nimport { getMenu, getFullUrl, getLogo, getResizedImageUrl } from '../helpers';\n\nclass MenuTemplate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      menuOpen: false,\n      searchOpen: false\n    });\n  }\n\n  handleMenuStateChange({\n    isOpen\n  }) {\n    this.setState({\n      menuOpen: isOpen\n    });\n  }\n\n  handleSearchStateChange({\n    isOpen\n  }) {\n    this.setState({\n      searchOpen: isOpen\n    });\n  }\n\n  render() {\n    const {\n      menuItems,\n      menuColour,\n      borderColour,\n      logoUrl,\n      sticky,\n      children\n    } = this.props;\n    const mobileMenuItems = menuItems.reduce((acc, item) => item.childMenu ? [...acc, ...item.childMenu] : [...acc, item], []);\n    return __jsx(React.Fragment, null, __jsx(HideAt, {\n      breakpoint: \"large\"\n    }, __jsx(MobileMenu, {\n      menuItems: mobileMenuItems,\n      menuColour: menuColour,\n      isOpen: this.state.menuOpen,\n      handleStateChange: state => {\n        this.handleMenuStateChange(state);\n      }\n    })), __jsx(Search, {\n      colour: menuColour,\n      borderColour: borderColour,\n      isOpen: this.state.searchOpen,\n      handleStateChange: state => {\n        this.handleSearchStateChange(state);\n      }\n    }), children, __jsx(Menu, {\n      menuItems: menuItems,\n      colour: menuColour,\n      logoUrl: logoUrl,\n      sticky: sticky,\n      onMenuClick: () => {\n        this.handleMenuStateChange({\n          isOpen: true\n        });\n      },\n      onSearchClick: () => {\n        this.handleSearchStateChange({\n          isOpen: true\n        });\n      }\n    }), __jsx(Clearfix, null));\n  }\n\n}\n\nconst HeaderTemplate = ({\n  colour,\n  colourHex,\n  colourHexLight,\n  Header,\n  title,\n  image\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: menu,\n    1: setMenu\n  } = useState([]);\n  const {\n    0: logoUrl,\n    1: setLogoUrl\n  } = useState('');\n  useEffect(() => {\n    Promise.all([getMenu(), getLogo(colour)]).then(([{\n      menu\n    }, logoUrl]) => {\n      setMenu(menu);\n      setLogoUrl(logoUrl);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", null);\n\n  if (!title || !image) {\n    return __jsx(MenuTemplate, {\n      menuItems: menu,\n      menuColour: colourHex,\n      borderColour: colourHexLight,\n      logoUrl: logoUrl,\n      sticky: true\n    });\n  }\n\n  return __jsx(MenuTemplate, {\n    menuItems: menu,\n    menuColour: colourHex,\n    borderColour: colourHexLight,\n    logoUrl: logoUrl\n  }, __jsx(Header, {\n    text: title,\n    image: getResizedImageUrl(getFullUrl(image)),\n    colour: colourHex\n  }));\n};\n\nexport default HeaderTemplate;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
