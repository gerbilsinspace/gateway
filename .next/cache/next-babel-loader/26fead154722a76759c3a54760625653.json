{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { markdown } from 'markdown';\nimport { url } from '../helpers/config';\nimport Header from '../templates/Header';\nimport Footer from '../templates/Footer';\nimport HeaderContainer from '../components/HeaderContainer';\nimport Image from '../components/Image';\nimport ImageWrapper from '../components/ImageWrapper';\nimport Container from '../components/Container';\nimport Clearfix from '../components/Clearfix';\nimport { getData, getMenuColour, getFullUrl, changeColourToHex, getAllColours } from '../helpers';\nconst Deck = styled.div`\n  position: relative;\n  z-index: 1;\n  padding: 35px;\n  line-height: 30px;\n  color: #fff;\n`;\nconst PageSummary = styled.div`\n  position: absolute;\n  z-index: 1;\n  text-align: center;\n  font-size: 30px;\n  line-height: 36px;\n  color: #fff;\n  height: 200px;\n  width: 100%;\n  padding: 40px 0;\n  text-align: center;\n\n  @media screen and (min-width: 991px) {\n    height: 500px;\n    padding: 175px 0 0;\n  }\n\n  @media screen and (min-width: 1021px) {\n    font-size: 90px;\n    line-height: 1.5em;\n  }\n`;\nconst PageDeck = styled.div`\n  padding: 40px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\nconst H2 = styled.h2`\n  font-size: 30px;\n  line-height: 36px;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 991px) {\n    width: 850px;\n    margin: 0 auto 20px;\n    text-align: center;\n  }\n`;\nconst P = styled.p`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n    width: 850px;\n    margin: 0 auto;\n    text-align: center;\n  }\n`;\nconst HeaderDeck = styled.h3`\n  position: absolute;\n  z-index: 1;\n  text-align: center;\n  color: white;\n  line-height: 200px;\n  height: 200px;\n  text-align: center;\n  font-size: 50px;\n  display: block;\n  width: 100%;\n\n  @media screen and (min-width: 991px) {\n    height: 500px;\n    line-height: 500px;\n  }\n`;\nconst ContentPieceContainer = styled.div`\n  float: ${props => props.direction};\n  background-color: ${props => props.colour};\n  width: ${props => props.width ? '100%' : 0};\n  min-height: 200px;\n\n  @media screen and (min-width: 991px) {\n    width: calc(${props => props.width}% - 10px);\n    border-right: ${props => props.direction === 'left' && props.width ? '10px solid #fff' : 0};\n    border-left: ${props => props.direction === 'right' && props.width ? '10px solid #fff' : 0};\n    border-bottom: ${props => props.width ? '20px solid white' : 0};\n    height: 500px;\n  }\n\n  h2 {\n    font-size: 2em;\n    line-height: 3em;\n  }\n\n  p {\n    margin-bottom: 1em;\n  }\n\n  a {\n    color: #fff;\n    text-decoration: underline;\n  }\n`;\n\nconst ContentPiece = ({\n  direction,\n  deck,\n  image,\n  colour,\n  width\n}) => {\n  let adjustedDirection = direction;\n\n  if (image) {\n    return __jsx(ContentPieceContainer, {\n      direction: adjustedDirection,\n      colour: colour,\n      width: width\n    }, __jsx(ImageWrapper, {\n      color: colour,\n      mobileMarginBottom: \"0\"\n    }, __jsx(Image, {\n      url: getFullUrl(image)\n    }), deck && __jsx(HeaderDeck, null, deck)));\n  }\n\n  if (typeof deck === 'undefined') return __jsx(\"div\", null);\n  return __jsx(React.Fragment, null, deck && __jsx(ContentPieceContainer, {\n    direction: adjustedDirection,\n    colour: colour,\n    width: width\n  }, __jsx(Deck, {\n    dangerouslySetInnerHTML: {\n      __html: markdown.toHTML(deck)\n    }\n  })));\n};\n\nconst ContentContainer = styled.li`\n  display: block;\n  width: 100%;\n`;\nconst Iframe = styled.div`\n  width: 100%;\n  height: 100vh;\n  margin-bottom: 40px;\n\n  iframe {\n    width: 100%;\n    height: 100vh;\n  }\n`;\n\nconst setWidth = (left = {}, right = {}) => {\n  let leftWidth = 0;\n  let rightWidth = 0;\n\n  if (left.deck && right.deck) {\n    leftWidth = 50;\n    rightWidth = 50;\n  } else if (left.image && right.image) {\n    leftWidth = 50;\n    rightWidth = 50;\n  } else if (left.image && right.deck) {\n    leftWidth = 60;\n    rightWidth = 40;\n  } else if (left.deck && right.image) {\n    leftWidth = 40;\n    rightWidth = 60;\n  } else if (!left.deck && !left.image && (right.image || right.deck)) {\n    leftWidth = 0;\n    rightWidth = 100;\n  } else if (!right.deck && !right.image && (left.image || left.deck)) {\n    leftWidth = 100;\n    rightWidth = 0;\n  }\n\n  return [leftWidth, rightWidth];\n};\n\nconst Content = ({\n  content\n}) => {\n  const {\n    left = {},\n    right = {}\n  } = content;\n  const [leftWidth, rightWidth] = setWidth(left, right);\n\n  if (right.deck && right.image) {\n    return __jsx(ContentContainer, null, __jsx(ContentPiece, {\n      direction: \"right\",\n      deck: right.deck,\n      image: right.image,\n      colour: changeColourToHex(right.colour),\n      width: rightWidth\n    }), __jsx(ContentPiece, {\n      direction: \"left\",\n      deck: left.deck,\n      image: left.image,\n      colour: changeColourToHex(left.colour),\n      width: leftWidth\n    }), __jsx(Clearfix, null));\n  }\n\n  return __jsx(ContentContainer, null, __jsx(ContentPiece, {\n    direction: \"left\",\n    deck: left.deck,\n    image: left.image,\n    colour: changeColourToHex(left.colour),\n    width: leftWidth\n  }), __jsx(ContentPiece, {\n    direction: \"right\",\n    deck: right.deck,\n    image: right.image,\n    colour: changeColourToHex(right.colour),\n    width: rightWidth\n  }), __jsx(Clearfix, null));\n};\n\nconst Contents = ({\n  contents = []\n}) => __jsx(\"ul\", null, contents.map(({\n  content\n}) => {\n  if (!content) return null;\n  const left = content.left || {};\n  const leftDeck = left.deck || '';\n  const right = content.right || {};\n  const rightDeck = right.deck || '';\n  return content && __jsx(Content, {\n    content: content,\n    key: leftDeck + rightDeck\n  });\n}));\n\nconst Page = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: subtitleImage,\n    1: setSubtitleImage\n  } = useState('');\n  const {\n    0: subtitleText,\n    1: setSubtitleText\n  } = useState('');\n  const {\n    0: deckTitle,\n    1: setDeckTitle\n  } = useState('');\n  const {\n    0: deckParagraph,\n    1: setDeckParagraph\n  } = useState('');\n  const {\n    0: iframe,\n    1: setIframe\n  } = useState('');\n  const {\n    0: contents,\n    1: setContents\n  } = useState([]);\n  const router = useRouter();\n  const {\n    query: {\n      id\n    }\n  } = router;\n  useEffect(() => {\n    if (!id) return;\n    getData(`data/pages/${id.split(' ').join('-').split('%20').join('-').toLowerCase()}.json`).then(data => {\n      setTitle(data.title);\n      setImage(data.header.image);\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setSubtitleText(data.subtitle.subtitle);\n      setSubtitleImage(data.subtitle && data.subtitle.image && url + data.subtitle.image.slice(1));\n      setDeckTitle(data.deck && data.deck.title);\n      setDeckParagraph(data.deck && data.deck.paragraph);\n      setContents(data.contents);\n      setIframe(data.iframe || '');\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(true);\n      setLoading(false);\n    });\n  }, [id]);\n  useEffect(() => {\n    if (error) {\n      router.replace('/error-404');\n    }\n  }, [error]);\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, title, \" - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    title: title,\n    image: image,\n    Header: HeaderContainer\n  }), __jsx(Container, null, subtitleImage && __jsx(ImageWrapper, null, __jsx(Image, {\n    url: subtitleImage\n  }), __jsx(Container, null, __jsx(PageSummary, {\n    color: colourHex\n  }, subtitleText)))), __jsx(PageDeck, {\n    colour: colourHex\n  }, __jsx(Container, null, deckTitle && __jsx(H2, null, deckTitle), deckParagraph && __jsx(P, null, deckParagraph))), __jsx(Container, null, __jsx(Contents, {\n    contents: contents\n  }), iframe && iframe.length > 0 && __jsx(Iframe, {\n    dangerouslySetInnerHTML: {\n      __html: iframe\n    }\n  })), __jsx(Footer, null));\n};\n\nexport default Page;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
