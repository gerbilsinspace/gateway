{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { slide as SlideMenu } from 'react-burger-menu';\nimport Async from 'react-promise';\nimport Downshift from 'downshift';\nimport flat from 'flat';\nimport { Link } from '../router';\nimport { getData } from '../helpers';\nconst StyledLink = styled.a`\n  color: white;\n  padding: 20px 25px;\n  display: inline-block;\n  text-decoration: none;\n`;\nconst StyledSearchInput = styled.input`\n  background: ${props => props.colour};\n  color: white;\n  border: 0;\n  font-size: 20px;\n  border-bottom: 3px solid ${props => props.borderColour};\n  font-family: 'Ginger', sans-serif;\n`;\n\nconst SearchInput = props => __jsx(StyledSearchInput, _extends({}, props, {\n  type: \"text\"\n}));\n\nconst SearchListItem = ({\n  item,\n  getItemProps\n}) => __jsx(\"li\", getItemProps({\n  key: item.data.title,\n  item: item\n}), __jsx(Link, {\n  href: `/${item.pageUrl}`\n}, __jsx(StyledLink, null, __jsx(\"div\", null, item.data.title.split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(\"div\", null, item.breadcrumb.split(' - ').join('___').split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' ').split('___').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' - ')))));\n\nconst blackList = ['audioFile', 'colour', 'date', 'email', 'file', 'filters', 'time', 'titleRole', 'image', 'menuColour', 'optionalContent', 'phoneNumber', 'youtubeLink'];\n\nconst setStyles = colour => ({\n  bmBurgerButton: {\n    display: 'none'\n  },\n  bmBurgerBars: {\n    background: colour,\n    height: '3px'\n  },\n  bmCrossButton: {\n    height: '24px',\n    width: '24px'\n  },\n  bmCross: {\n    background: 'white'\n  },\n  bmMenu: {\n    background: colour,\n    padding: '2.5em 1.5em 0',\n    fontSize: '1.15em'\n  },\n  bmMorphShape: {\n    fill: '#373a47'\n  },\n  bmItemList: {\n    color: 'white',\n    padding: '0.8em'\n  },\n  bmItem: {\n    display: 'inline-block'\n  },\n  bmOverlay: {\n    background: 'rgba(0, 0, 0, 0.2)'\n  }\n});\n\nconst Search = ({\n  colour,\n  isOpen,\n  handleStateChange,\n  borderColour\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: searchData,\n    1: setSearchData\n  } = useState([]);\n  useEffect(() => {\n    getData('data/search/index.json').then(data => {\n      data.forEach((item, index) => {\n        const flattened = Object.entries(flat(item.data));\n        const filtered = flattened.reduce((acc, item) => {\n          const inBlackList = blackList.some(blackListItem => item[0].includes(blackListItem));\n          return inBlackList ? acc : [...acc, item];\n        }, []);\n        data[index].flat = filtered;\n        let pageUrl = data[index].url.slice(0, -5).split('data/')[1];\n        data[index].pageUrl = pageUrl;\n        const breadcrumb = pageUrl.split('/').join(' - ');\n        data[index].breadcrumb = breadcrumb;\n        setSearchData(data);\n        setLoading(false);\n      });\n    });\n  }, []);\n  const styles = setStyles(colour);\n\n  const onSearch = (data, inputValue) => data.filter(item => item.flat.some(flatItem => flatItem && flatItem[1] && typeof flatItem[1] !== 'object' && !Array.isArray(flatItem[1]) && typeof flatItem[1] !== 'boolean' && typeof flatItem[1] !== 'number' && flatItem[1].toLowerCase().includes(inputValue.toLowerCase())));\n\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(SlideMenu, {\n    styles: styles,\n    right: true,\n    isOpen: isOpen,\n    onStateChange: handleStateChange\n  }, __jsx(Downshift, {\n    itemToString: item => {\n      return '';\n    }\n  }, props => {\n    const {\n      getInputProps,\n      getMenuProps,\n      getItemProps,\n      inputValue\n    } = props;\n    return __jsx(\"div\", null, __jsx(SearchInput, _extends({}, getInputProps(), {\n      colour: colour,\n      borderColour: borderColour\n    })), isOpen && !!inputValue.length && __jsx(\"ul\", getMenuProps(), onSearch(searchData, inputValue).filter(item => {\n      if (item.type !== 'people') return true;\n      if (!item.data.filters.all) return false;\n      if (item.data.filters.all === 'false') return false;\n      return true;\n    }).map(item => __jsx(SearchListItem, {\n      item: item,\n      getItemProps: getItemProps\n    }))));\n  }));\n};\n\nexport default Search;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/components/Search.js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "styled",
      "slide",
      "SlideMenu",
      "Async",
      "Downshift",
      "flat",
      "Link",
      "getData",
      "StyledLink",
      "a",
      "StyledSearchInput",
      "input",
      "props",
      "colour",
      "borderColour",
      "SearchInput",
      "SearchListItem",
      "item",
      "getItemProps",
      "key",
      "data",
      "title",
      "pageUrl",
      "split",
      "map",
      "word",
      "toUpperCase",
      "substr",
      "join",
      "breadcrumb",
      "blackList",
      "setStyles",
      "bmBurgerButton",
      "display",
      "bmBurgerBars",
      "background",
      "height",
      "bmCrossButton",
      "width",
      "bmCross",
      "bmMenu",
      "padding",
      "fontSize",
      "bmMorphShape",
      "fill",
      "bmItemList",
      "color",
      "bmItem",
      "bmOverlay",
      "Search",
      "isOpen",
      "handleStateChange",
      "loading",
      "setLoading",
      "searchData",
      "setSearchData",
      "then",
      "forEach",
      "index",
      "flattened",
      "Object",
      "entries",
      "filtered",
      "reduce",
      "acc",
      "inBlackList",
      "some",
      "blackListItem",
      "includes",
      "url",
      "slice",
      "styles",
      "onSearch",
      "inputValue",
      "filter",
      "flatItem",
      "Array",
      "isArray",
      "toLowerCase",
      "getInputProps",
      "getMenuProps",
      "length",
      "type",
      "filters",
      "all"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {slide as SlideMenu} from 'react-burger-menu';\nimport Async from 'react-promise';\nimport Downshift from 'downshift';\nimport flat from 'flat';\nimport {Link} from '../router';\nimport {getData} from '../helpers';\n\nconst StyledLink = styled.a`\n  color: white;\n  padding: 20px 25px;\n  display: inline-block;\n  text-decoration: none;\n`;\n\nconst StyledSearchInput = styled.input`\n  background: ${props => props.colour};\n  color: white;\n  border: 0;\n  font-size: 20px;\n  border-bottom: 3px solid ${props => props.borderColour};\n  font-family: 'Ginger', sans-serif;\n`;\n\nconst SearchInput = props => <StyledSearchInput {...props} type=\"text\" />;\n\nconst SearchListItem = ({item, getItemProps}) => (\n  <li\n    {...getItemProps({\n      key: item.data.title,\n      item: item\n    })}\n  >\n    <Link href={`/${item.pageUrl}`}>\n      <StyledLink>\n        <div>\n          {item.data.title\n            .split('-')\n            .map(word => word && word[0].toUpperCase() + word.substr(1))\n            .join(' ')}\n        </div>\n        <div>\n          {item.breadcrumb\n            .split(' - ')\n            .join('___')\n            .split('-')\n            .map(word => word && word[0].toUpperCase() + word.substr(1))\n            .join(' ')\n            .split('___')\n            .map(word => word && word[0].toUpperCase() + word.substr(1))\n            .join(' - ')}\n        </div>\n      </StyledLink>\n    </Link>\n  </li>\n);\n\nconst blackList = [\n  'audioFile',\n  'colour',\n  'date',\n  'email',\n  'file',\n  'filters',\n  'time',\n  'titleRole',\n  'image',\n  'menuColour',\n  'optionalContent',\n  'phoneNumber',\n  'youtubeLink'\n];\n\nconst setStyles = colour => ({\n  bmBurgerButton: {\n    display: 'none'\n  },\n  bmBurgerBars: {\n    background: colour,\n    height: '3px'\n  },\n  bmCrossButton: {\n    height: '24px',\n    width: '24px'\n  },\n  bmCross: {\n    background: 'white'\n  },\n  bmMenu: {\n    background: colour,\n    padding: '2.5em 1.5em 0',\n    fontSize: '1.15em'\n  },\n  bmMorphShape: {\n    fill: '#373a47'\n  },\n  bmItemList: {\n    color: 'white',\n    padding: '0.8em'\n  },\n  bmItem: {\n    display: 'inline-block'\n  },\n  bmOverlay: {\n    background: 'rgba(0, 0, 0, 0.2)'\n  }\n});\n\nconst Search = ({colour, isOpen, handleStateChange, borderColour}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchData, setSearchData] = useState([]);\n\n  useEffect(() => {\n    getData('data/search/index.json').then(data => {\n      data.forEach((item, index) => {\n        const flattened = Object.entries(flat(item.data));\n        const filtered = flattened.reduce((acc, item) => {\n          const inBlackList = blackList.some(blackListItem =>\n            item[0].includes(blackListItem)\n          );\n\n          return inBlackList ? acc : [...acc, item];\n        }, []);\n\n        data[index].flat = filtered;\n\n        let pageUrl = data[index].url.slice(0, -5).split('data/')[1];\n\n        data[index].pageUrl = pageUrl;\n\n        const breadcrumb = pageUrl.split('/').join(' - ');\n\n        data[index].breadcrumb = breadcrumb;\n\n        setSearchData(data);\n        setLoading(false);\n      });\n    });\n  }, []);\n\n  const styles = setStyles(colour);\n\n  const onSearch = (data, inputValue) =>\n    data.filter(item =>\n      item.flat.some(\n        flatItem =>\n          flatItem &&\n          flatItem[1] &&\n          typeof flatItem[1] !== 'object' &&\n          !Array.isArray(flatItem[1]) &&\n          typeof flatItem[1] !== 'boolean' &&\n          typeof flatItem[1] !== 'number' &&\n          flatItem[1].toLowerCase().includes(inputValue.toLowerCase())\n      )\n    );\n\n  if (loading) return <div />;\n\n  return (\n    <SlideMenu\n      styles={styles}\n      right\n      isOpen={isOpen}\n      onStateChange={handleStateChange}\n    >\n      <Downshift\n        itemToString={item => {\n          return '';\n        }}\n      >\n        {props => {\n          const {getInputProps, getMenuProps, getItemProps, inputValue} = props;\n\n          return (\n            <div>\n              <SearchInput\n                {...getInputProps()}\n                colour={colour}\n                borderColour={borderColour}\n              />\n              {isOpen && !!inputValue.length && (\n                <ul {...getMenuProps()}>\n                  {onSearch(searchData, inputValue)\n                    .filter(item => {\n                      if (item.type !== 'people') return true;\n                      if (!item.data.filters.all) return false;\n                      if (item.data.filters.all === 'false') return false;\n                      return true;\n                    })\n                    .map(item => (\n                      <SearchListItem item={item} getItemProps={getItemProps} />\n                    ))}\n                </ul>\n              )}\n            </div>\n          );\n        }}\n      </Downshift>\n    </SlideMenu>\n  );\n};\n\nexport default Search;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
