{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/joe/dev/gateway/pages/words/index.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { format, compareAsc } from 'date-fns';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport Header from '../../templates/Header';\nimport Footer from '../../templates/Footer';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport PageSummary from '../../components/PageSummary';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Clearfix from '../../components/Clearfix';\nimport StyledLink from '../../components/LinkWords';\nimport StyledText from '../../components/TextWords';\nimport StyledDate from '../../components/DateWords';\nimport Title from '../../components/H2Words';\nimport ReadMore from '../../components/ReadMoreWords';\nimport StyledTextContainer from '../../components/TextContainerWords';\nimport StyledHideOnMobile from '../../components/HideOnMobileWords';\nimport Word from '../../components/WordWords';\nimport Pagination from '../../components/Pagination';\nimport StyledPagination from '../../components/PaginationWords';\nimport Subtitle from '../../components/Subtitle';\nimport StyledImageWrapper from '../../components/ImageWrapperWords';\nimport { getData, getFullUrl, changeColourToHex, getMenuColour, getAllColours } from '../../helpers';\n\nvar Words = function Words() {\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(''),\n      colour = _useState2[0],\n      setColour = _useState2[1];\n\n  var _useState3 = useState(''),\n      colourHex = _useState3[0],\n      setColourHex = _useState3[1];\n\n  var _useState4 = useState(''),\n      colourHexLight = _useState4[0],\n      setColourHexLight = _useState4[1];\n\n  var _useState5 = useState(''),\n      header = _useState5[0],\n      setHeader = _useState5[1];\n\n  var _useState6 = useState(''),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  var _useState7 = useState(''),\n      subtitle = _useState7[0],\n      setSubtitle = _useState7[1];\n\n  var _useState8 = useState(''),\n      title = _useState8[0],\n      setTitle = _useState8[1];\n\n  var _useState9 = useState(0),\n      maxPageCount = _useState9[0],\n      setMaxPageCount = _useState9[1];\n\n  var _useState10 = useState(''),\n      words = _useState10[0],\n      setWords = _useState10[1];\n\n  var _useState11 = useState(0),\n      wordsCount = _useState11[0],\n      setWordsCount = _useState11[1];\n\n  var _useState12 = useState(''),\n      currentPage = _useState12[0],\n      setCurrentPage = _useState12[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    Promise.all([getData('data/words/index.json'), getData('data/pages/words.json')]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          data = _ref2[0],\n          wordsPageData = _ref2[1];\n\n      var currentPage = router && router.query && router.query.page || 1;\n      setCurrentPage(currentPage);\n\n      var _getAllColours = getAllColours(getMenuColour(data)),\n          _getAllColours2 = _slicedToArray(_getAllColours, 3),\n          colour = _getAllColours2[0],\n          colourHex = _getAllColours2[1],\n          colourHexLight = _getAllColours2[2];\n\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setHeader(wordsPageData.header);\n      setImage(getFullUrl(wordsPageData.header.image));\n      setSubtitle(wordsPageData.subtitle);\n      setTitle(wordsPageData.title);\n      var words = Object.values(data).map(function (word) {\n        return word.data;\n      }).filter(function (word) {\n        return !!word.date;\n      }).sort(function (a, b) {\n        return compareAsc(new Date(b.date), new Date(a.date));\n      });\n      setWordsCount(words.length);\n      setWords(words.slice(currentPage * 10 - 10, currentPage * 10));\n      setMaxPageCount(Math.ceil(wordsCount / 10));\n      setLoading(false);\n    });\n  }, [router]);\n  if (loading) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }\n  });\n\n  if (!words || words.length === 0) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    key: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Words - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    title: title,\n    image: image,\n    Header: HeaderContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), subtitle && subtitle.subtitle && __jsx(PageSummary, {\n    color: colourHex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, subtitle.subtitle), __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, maxPageCount > 1 && __jsx(StyledPagination, {\n    color: colourHex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, __jsx(Pagination, {\n    maxCount: maxPageCount,\n    currentPage: currentPage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  })), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, words.map(function (word) {\n    var authors = word.authors && word.authors.map(function (_ref3) {\n      var author = _ref3.author;\n      return author.trim();\n    }).filter(function (author) {\n      return author;\n    });\n    return __jsx(Word, {\n      key: word.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, __jsx(Link, {\n      href: \"/words/\".concat(word.slug),\n      passHref: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, __jsx(StyledLink, {\n      colour: changeColourToHex(word.colour, true),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, __jsx(StyledTextContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, __jsx(StyledText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 23\n      }\n    }, __jsx(StyledDate, {\n      colour: changeColourToHex(word.colour),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, format(word.date, 'EEEE do LLLL yyyy'), authors && authors.length > 0 && __jsx(React.Fragment, null, authors.map(function (author) {\n      return __jsx(React.Fragment, {\n        key: author,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 33\n        }\n      }, ' - ', author.split('-').map(function (word) {\n        return word[0].toUpperCase() + word.substr(1);\n      }).join(' '));\n    }))), __jsx(Title, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    }, word.title.split('-').map(function (word) {\n      return word[0].toUpperCase() + word.substr(1);\n    }).join(' ')), __jsx(Subtitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, word.subtitle)), __jsx(ReadMore, {\n      colour: changeColourToHex(word.colour),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 23\n      }\n    }, \"Read More +\")), __jsx(StyledHideOnMobile, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, __jsx(StyledImageWrapper, {\n      colour: changeColourToHex(word.colour),\n      marginBottom: 0,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 23\n      }\n    }, __jsx(Image, {\n      url: getFullUrl(word.image),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    }))), __jsx(Clearfix, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }))));\n  }))), __jsx(Footer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Words;",
  "map": {
    "version": 3,
    "sources": ["/home/joe/dev/gateway/pages/words/index.js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "format",
      "compareAsc",
      "Head",
      "useRouter",
      "Link",
      "Header",
      "Footer",
      "HeaderContainer",
      "PageSummary",
      "Image",
      "Container",
      "Clearfix",
      "StyledLink",
      "StyledText",
      "StyledDate",
      "Title",
      "ReadMore",
      "StyledTextContainer",
      "StyledHideOnMobile",
      "Word",
      "Pagination",
      "StyledPagination",
      "Subtitle",
      "StyledImageWrapper",
      "getData",
      "getFullUrl",
      "changeColourToHex",
      "getMenuColour",
      "getAllColours",
      "Words",
      "loading",
      "setLoading",
      "colour",
      "setColour",
      "colourHex",
      "setColourHex",
      "colourHexLight",
      "setColourHexLight",
      "header",
      "setHeader",
      "image",
      "setImage",
      "subtitle",
      "setSubtitle",
      "title",
      "setTitle",
      "maxPageCount",
      "setMaxPageCount",
      "words",
      "setWords",
      "wordsCount",
      "setWordsCount",
      "currentPage",
      "setCurrentPage",
      "router",
      "Promise",
      "all",
      "then",
      "data",
      "wordsPageData",
      "query",
      "page",
      "Object",
      "values",
      "map",
      "word",
      "filter",
      "date",
      "sort",
      "a",
      "b",
      "Date",
      "length",
      "slice",
      "Math",
      "ceil",
      "authors",
      "author",
      "trim",
      "slug",
      "split",
      "toUpperCase",
      "substr",
      "join"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport {format, compareAsc} from 'date-fns';\nimport Head from 'next/head';\nimport {useRouter} from 'next/router';\nimport Link from 'next/link';\n\nimport Header from '../../templates/Header';\nimport Footer from '../../templates/Footer';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport PageSummary from '../../components/PageSummary';\nimport Image from '../../components/Image';\nimport Container from '../../components/Container';\nimport Clearfix from '../../components/Clearfix';\nimport StyledLink from '../../components/LinkWords';\nimport StyledText from '../../components/TextWords';\nimport StyledDate from '../../components/DateWords';\nimport Title from '../../components/H2Words';\nimport ReadMore from '../../components/ReadMoreWords';\nimport StyledTextContainer from '../../components/TextContainerWords';\nimport StyledHideOnMobile from '../../components/HideOnMobileWords';\nimport Word from '../../components/WordWords';\nimport Pagination from '../../components/Pagination';\nimport StyledPagination from '../../components/PaginationWords';\nimport Subtitle from '../../components/Subtitle';\nimport StyledImageWrapper from '../../components/ImageWrapperWords';\n\nimport {\n  getData,\n  getFullUrl,\n  changeColourToHex,\n  getMenuColour,\n  getAllColours\n} from '../../helpers';\n\nconst Words = () => {\n  const [loading, setLoading] = useState(true);\n  const [colour, setColour] = useState('');\n  const [colourHex, setColourHex] = useState('');\n  const [colourHexLight, setColourHexLight] = useState('');\n  const [header, setHeader] = useState('');\n  const [image, setImage] = useState('');\n  const [subtitle, setSubtitle] = useState('');\n  const [title, setTitle] = useState('');\n  const [maxPageCount, setMaxPageCount] = useState(0);\n  const [words, setWords] = useState('');\n  const [wordsCount, setWordsCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    Promise.all([\n      getData('data/words/index.json'),\n      getData('data/pages/words.json')\n    ]).then(([data, wordsPageData]) => {\n      const currentPage = (router && router.query && router.query.page) || 1;\n      setCurrentPage(currentPage);\n\n      const [colour, colourHex, colourHexLight] = getAllColours(\n        getMenuColour(data)\n      );\n\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setHeader(wordsPageData.header);\n      setImage(getFullUrl(wordsPageData.header.image));\n      setSubtitle(wordsPageData.subtitle);\n      setTitle(wordsPageData.title);\n\n      let words = Object.values(data)\n        .map(word => word.data)\n        .filter(word => !!word.date)\n        .sort((a, b) => {\n          return compareAsc(new Date(b.date), new Date(a.date));\n        });\n\n      setWordsCount(words.length);\n\n      setWords(words.slice(currentPage * 10 - 10, currentPage * 10));\n\n      setMaxPageCount(Math.ceil(wordsCount / 10));\n      setLoading(false);\n    });\n  }, [router]);\n\n  if (loading) return <div />;\n  if (!words || words.length === 0) {\n    return <div />;\n  }\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title key=\"title\">Words - Gateway Church, York</title>\n      </Head>\n      <Header\n        colour={colour}\n        colourHex={colourHex}\n        colourHexLight={colourHexLight}\n        title={title}\n        image={image}\n        Header={HeaderContainer}\n      />\n      {subtitle && subtitle.subtitle && (\n        <PageSummary color={colourHex}>{subtitle.subtitle}</PageSummary>\n      )}\n\n      <Container>\n        {maxPageCount > 1 && (\n          <StyledPagination color={colourHex}>\n            <Pagination maxCount={maxPageCount} currentPage={currentPage} />\n          </StyledPagination>\n        )}\n        <ul>\n          {words.map(word => {\n            const authors =\n              word.authors &&\n              word.authors\n                .map(({author}) => author.trim())\n                .filter(author => author);\n\n            return (\n              <Word key={word.title}>\n                <Link href={`/words/${word.slug}`} passHref>\n                  <StyledLink colour={changeColourToHex(word.colour, true)}>\n                    <StyledTextContainer>\n                      <StyledText>\n                        <StyledDate colour={changeColourToHex(word.colour)}>\n                          {format(word.date, 'EEEE do LLLL yyyy')}\n                          {authors && authors.length > 0 && (\n                            <>\n                              {authors.map(author => (\n                                <React.Fragment key={author}>\n                                  {' - '}\n                                  {author\n                                    .split('-')\n                                    .map(\n                                      word =>\n                                        word[0].toUpperCase() + word.substr(1)\n                                    )\n                                    .join(' ')}\n                                </React.Fragment>\n                              ))}\n                            </>\n                          )}\n                        </StyledDate>\n                        <Title>\n                          {word.title\n                            .split('-')\n                            .map(word => word[0].toUpperCase() + word.substr(1))\n                            .join(' ')}\n                        </Title>\n                        <Subtitle>{word.subtitle}</Subtitle>\n                      </StyledText>\n                      <ReadMore colour={changeColourToHex(word.colour)}>\n                        Read More +\n                      </ReadMore>\n                    </StyledTextContainer>\n                    <StyledHideOnMobile>\n                      <StyledImageWrapper\n                        colour={changeColourToHex(word.colour)}\n                        marginBottom={0}\n                      >\n                        <Image url={getFullUrl(word.image)} />\n                      </StyledImageWrapper>\n                    </StyledHideOnMobile>\n                    <Clearfix />\n                  </StyledLink>\n                </Link>\n              </Word>\n            );\n          })}\n        </ul>\n      </Container>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Words;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
