{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { slide as SlideMenu } from 'react-burger-menu';\nimport Async from 'react-promise';\nimport Downshift from 'downshift';\nimport flat from 'flat';\nimport Link from 'next/link';\nimport { getData } from '../helpers';\nconst StyledLink = styled.a`\n  color: white;\n  padding: 20px 25px;\n  display: inline-block;\n  text-decoration: none;\n`;\nconst StyledSearchInput = styled.input`\n  background: ${props => props.colour};\n  color: white;\n  border: 0;\n  font-size: 20px;\n  border-bottom: 3px solid ${props => props.borderColour};\n  font-family: 'Ginger', sans-serif;\n`;\n\nconst SearchInput = props => __jsx(StyledSearchInput, _extends({}, props, {\n  type: \"text\"\n}));\n\nconst SearchListItem = ({\n  item,\n  getItemProps\n}) => __jsx(\"li\", getItemProps({\n  key: item.data.title,\n  item: item\n}), __jsx(Link, {\n  href: `/${item.pageUrl}`\n}, __jsx(StyledLink, null, __jsx(\"div\", null, item.data.title.split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(\"div\", null, item.breadcrumb.split(' - ').join('___').split('-').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' ').split('___').map(word => word && word[0].toUpperCase() + word.substr(1)).join(' - ')))));\n\nconst blackList = ['audioFile', 'colour', 'date', 'email', 'file', 'filters', 'time', 'titleRole', 'image', 'menuColour', 'optionalContent', 'phoneNumber', 'youtubeLink'];\n\nconst setStyles = colour => ({\n  bmBurgerButton: {\n    display: 'none'\n  },\n  bmBurgerBars: {\n    background: colour,\n    height: '3px'\n  },\n  bmCrossButton: {\n    height: '24px',\n    width: '24px'\n  },\n  bmCross: {\n    background: 'white'\n  },\n  bmMenu: {\n    background: colour,\n    padding: '2.5em 1.5em 0',\n    fontSize: '1.15em'\n  },\n  bmMorphShape: {\n    fill: '#373a47'\n  },\n  bmItemList: {\n    color: 'white',\n    padding: '0.8em'\n  },\n  bmItem: {\n    display: 'inline-block'\n  },\n  bmOverlay: {\n    background: 'rgba(0, 0, 0, 0.2)'\n  }\n});\n\nconst Search = ({\n  colour,\n  isOpen,\n  handleStateChange,\n  borderColour\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: searchData,\n    1: setSearchData\n  } = useState([]);\n  useEffect(() => {\n    getData('data/search/index.json').then(data => {\n      data.forEach((item, index) => {\n        const flattened = Object.entries(flat(item.data));\n        const filtered = flattened.reduce((acc, item) => {\n          const inBlackList = blackList.some(blackListItem => item[0].includes(blackListItem));\n          return inBlackList ? acc : [...acc, item];\n        }, []);\n        data[index].flat = filtered;\n        let pageUrl = data[index].url.slice(0, -5).split('data/')[1];\n        data[index].pageUrl = pageUrl;\n        const breadcrumb = pageUrl.split('/').join(' - ');\n        data[index].breadcrumb = breadcrumb;\n        setSearchData(data);\n        setLoading(false);\n      });\n    });\n  }, []);\n  const styles = setStyles(colour);\n\n  const onSearch = (data, inputValue) => data.filter(item => item.flat.some(flatItem => flatItem && flatItem[1] && typeof flatItem[1] !== 'object' && !Array.isArray(flatItem[1]) && typeof flatItem[1] !== 'boolean' && typeof flatItem[1] !== 'number' && flatItem[1].toLowerCase().includes(inputValue.toLowerCase())));\n\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(SlideMenu, {\n    styles: styles,\n    right: true,\n    isOpen: isOpen,\n    onStateChange: handleStateChange\n  }, __jsx(Downshift, {\n    itemToString: item => {\n      return '';\n    }\n  }, props => {\n    const {\n      getInputProps,\n      getMenuProps,\n      getItemProps,\n      inputValue\n    } = props;\n    return __jsx(\"div\", null, __jsx(SearchInput, _extends({}, getInputProps(), {\n      colour: colour,\n      borderColour: borderColour\n    })), isOpen && !!inputValue.length && __jsx(\"ul\", getMenuProps(), onSearch(searchData, inputValue).filter(item => {\n      if (item.type !== 'people') return true;\n      if (!item.data.filters.all) return false;\n      if (item.data.filters.all === 'false') return false;\n      return true;\n    }).map(item => __jsx(SearchListItem, {\n      item: item,\n      getItemProps: getItemProps\n    }))));\n  }));\n};\n\nexport default Search;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
