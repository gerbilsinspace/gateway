{
  "ast": null,
  "code": "import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  padding: 20px 25px;\\n  display: inline-block;\\n  text-decoration: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { slide as SlideMenu } from 'react-burger-menu';\nvar MenuLink = styled.a(_templateObject(), function (props) {\n  return props.menuColour;\n});\n\nvar MenuItem = function MenuItem(_ref) {\n  var menuItem = _ref.menuItem,\n      menuColour = _ref.menuColour;\n  return React.createElement(\"div\", {\n    key: menuItem.title\n  }, React.createElement(MenuLink, {\n    href: menuItem.link,\n    menuColour: menuColour\n  }, menuItem.title));\n};\n\nvar MobileMenu = function MobileMenu(_ref2) {\n  var _ref2$menuItems = _ref2.menuItems,\n      menuItems = _ref2$menuItems === void 0 ? [] : _ref2$menuItems,\n      menuColour = _ref2.menuColour,\n      iconUrl = _ref2.iconUrl,\n      isOpen = _ref2.isOpen,\n      handleStateChange = _ref2.handleStateChange;\n  var styles = {\n    bmBurgerButton: {\n      display: 'none'\n    },\n    bmBurgerBars: {\n      background: menuColour,\n      height: '3px'\n    },\n    bmCrossButton: {\n      height: '24px',\n      width: '24px'\n    },\n    bmCross: {\n      background: menuColour\n    },\n    bmMenu: {\n      background: 'white',\n      padding: '2.5em 1.5em 0',\n      fontSize: '1.15em'\n    },\n    bmMorphShape: {\n      fill: '#373a47'\n    },\n    bmItemList: {\n      color: menuColour,\n      padding: '0.8em'\n    },\n    bmItem: {\n      display: 'inline-block'\n    },\n    bmOverlay: {\n      background: 'rgba(0, 0, 0, 0.2)'\n    }\n  };\n  return React.createElement(SlideMenu, {\n    styles: styles,\n    isOpen: isOpen,\n    onStateChange: function onStateChange(state) {\n      return handleStateChange(state);\n    }\n  }, menuItems.map(function (menuItem, id) {\n    return React.createElement(MenuItem, {\n      menuItem: menuItem,\n      menuColour: menuColour,\n      key: id\n    });\n  }));\n};\n\nexport default MobileMenu;",
  "map": {
    "version": 3,
    "sources": ["/Users/joeabell/dev/gateway/components/MobileMenu.js"],
    "names": [
      "React",
      "styled",
      "slide",
      "SlideMenu",
      "MenuLink",
      "a",
      "props",
      "menuColour",
      "MenuItem",
      "menuItem",
      "title",
      "link",
      "MobileMenu",
      "menuItems",
      "iconUrl",
      "isOpen",
      "handleStateChange",
      "styles",
      "bmBurgerButton",
      "display",
      "bmBurgerBars",
      "background",
      "height",
      "bmCrossButton",
      "width",
      "bmCross",
      "bmMenu",
      "padding",
      "fontSize",
      "bmMorphShape",
      "fill",
      "bmItemList",
      "color",
      "bmItem",
      "bmOverlay",
      "state",
      "map",
      "id"
    ],
    "mappings": ";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAK,IAAIC,SAAlB,QAAmC,mBAAnC;AAEA,IAAMC,QAAQ,GAAGH,MAAM,CAACI,CAAV,oBACH,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CADF,CAAd;;AAOA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaF,UAAb,QAAaA,UAAb;AAAA,SACf;AAAK,IAAA,GAAG,EAAEE,QAAQ,CAACC;AAAnB,KACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAED,QAAQ,CAACE,IAAzB;AAA+B,IAAA,UAAU,EAAEJ;AAA3C,KACGE,QAAQ,CAACC,KADZ,CADF,CADe;AAAA,CAAjB;;AAQA,IAAME,UAAU,GAAG,SAAbA,UAAa,QAMb;AAAA,8BALJC,SAKI;AAAA,MALJA,SAKI,gCALQ,EAKR;AAAA,MAJJN,UAII,SAJJA,UAII;AAAA,MAHJO,OAGI,SAHJA,OAGI;AAAA,MAFJC,MAEI,SAFJA,MAEI;AAAA,MADJC,iBACI,SADJA,iBACI;AACJ,MAAMC,MAAM,GAAG;AACbC,IAAAA,cAAc,EAAE;AACdC,MAAAA,OAAO,EAAE;AADK,KADH;AAIbC,IAAAA,YAAY,EAAE;AACZC,MAAAA,UAAU,EAAEd,UADA;AAEZe,MAAAA,MAAM,EAAE;AAFI,KAJD;AAQbC,IAAAA,aAAa,EAAE;AACbD,MAAAA,MAAM,EAAE,MADK;AAEbE,MAAAA,KAAK,EAAE;AAFM,KARF;AAYbC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,UAAU,EAAEd;AADL,KAZI;AAebmB,IAAAA,MAAM,EAAE;AACNL,MAAAA,UAAU,EAAE,OADN;AAENM,MAAAA,OAAO,EAAE,eAFH;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAfK;AAoBbC,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAE;AADM,KApBD;AAuBbC,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAEzB,UADG;AAEVoB,MAAAA,OAAO,EAAE;AAFC,KAvBC;AA2BbM,IAAAA,MAAM,EAAE;AACNd,MAAAA,OAAO,EAAE;AADH,KA3BK;AA8Bbe,IAAAA,SAAS,EAAE;AACTb,MAAAA,UAAU,EAAE;AADH;AA9BE,GAAf;AAmCA,SACE,oBAAC,SAAD;AACE,IAAA,MAAM,EAAEJ,MADV;AAEE,IAAA,MAAM,EAAEF,MAFV;AAGE,IAAA,aAAa,EAAE,uBAAAoB,KAAK;AAAA,aAAInB,iBAAiB,CAACmB,KAAD,CAArB;AAAA;AAHtB,KAKGtB,SAAS,CAACuB,GAAV,CAAc,UAAC3B,QAAD,EAAW4B,EAAX;AAAA,WACb,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAE5B,QAApB;AAA8B,MAAA,UAAU,EAAEF,UAA1C;AAAsD,MAAA,GAAG,EAAE8B;AAA3D,MADa;AAAA,GAAd,CALH,CADF;AAWD,CArDD;;AAuDA,eAAezB,UAAf",
    "sourcesContent": [
      "import React from 'react';\nimport styled from 'styled-components';\nimport { slide as SlideMenu } from 'react-burger-menu';\n\nconst MenuLink = styled.a`\n  color: ${props => props.menuColour};\n  padding: 20px 25px;\n  display: inline-block;\n  text-decoration: none;\n`;\n\nconst MenuItem = ({ menuItem, menuColour }) => (\n  <div key={menuItem.title}>\n    <MenuLink href={menuItem.link} menuColour={menuColour}>\n      {menuItem.title}\n    </MenuLink>\n  </div>\n);\n\nconst MobileMenu = ({\n  menuItems = [],\n  menuColour,\n  iconUrl,\n  isOpen,\n  handleStateChange\n}) => {\n  const styles = {\n    bmBurgerButton: {\n      display: 'none'\n    },\n    bmBurgerBars: {\n      background: menuColour,\n      height: '3px'\n    },\n    bmCrossButton: {\n      height: '24px',\n      width: '24px'\n    },\n    bmCross: {\n      background: menuColour\n    },\n    bmMenu: {\n      background: 'white',\n      padding: '2.5em 1.5em 0',\n      fontSize: '1.15em'\n    },\n    bmMorphShape: {\n      fill: '#373a47'\n    },\n    bmItemList: {\n      color: menuColour,\n      padding: '0.8em'\n    },\n    bmItem: {\n      display: 'inline-block'\n    },\n    bmOverlay: {\n      background: 'rgba(0, 0, 0, 0.2)'\n    }\n  };\n\n  return (\n    <SlideMenu\n      styles={styles}\n      isOpen={isOpen}\n      onStateChange={state => handleStateChange(state)}\n    >\n      {menuItems.map((menuItem, id) => (\n        <MenuItem menuItem={menuItem} menuColour={menuColour} key={id} />\n      ))}\n    </SlideMenu>\n  );\n};\n\nexport default MobileMenu;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
