{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { getData, getMenuColour, changeColourToHex, getFullUrl, getAllColours } from '../helpers';\nimport { Link } from '../router';\nimport HeaderContainer from '../components/HeaderContainer';\nimport Header from '../templates/Header';\nimport Deck from '../components/Deck';\nimport Footer from '../templates/Footer';\nimport Image from '../components/Image';\nimport Container from '../components/Container';\nimport Clearfix from '../components/Clearfix';\nconst StyledLink = styled.a`\n  padding: 0 30px;\n  color: white;\n  background-color: ${props => props.colour};\n  display: block;\n  height: 300px;\n`;\nconst FilterTitle = styled.h1`\n  font-size: 30px;\n  line-height: 76px;\n  padding: 0 30px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\nconst FilterItemTitle = styled.h2`\n  font-size: 30px;\n  line-height: 76px;\n`;\nconst FilterItemDeck = styled.p`\n  line-height: 30px;\n  padding-bottom: 20px;\n  color: white;\n\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst PersonBlock = styled.div`\n  width: 50%;\n  float: left;\n  position: relative;\n  margin-bottom: 10px;\n  height: 200px;\n  color: white;\n  background-color: ${props => props.colour};\n`;\nconst Padding = styled.div`\n  padding: 20px;\n  line-height: 30px;\n`;\nconst Email = styled.p`\n  position: absolute;\n  bottom: 20px;\n`;\nconst Filter = styled.li`\n  @media screen and (min-width: 991px) {\n    width: calc(50% - 10px);\n    margin-bottom: 20px;\n\n    &:nth-child(odd) {\n      float: left;\n    }\n\n    &:nth-child(even) {\n      float: right;\n    }\n  }\n`;\nconst Person = styled.li`\n  @media screen and (min-width: 991px) {\n    width: calc(50% - 10px);\n    margin-bottom: 20px;\n\n    &:nth-child(odd) {\n      float: left;\n    }\n\n    &:nth-child(even) {\n      float: right;\n    }\n  }\n`;\nconst PersonTitle = styled.h2`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n    margin-bottom: 10px;\n  }\n`;\nconst PersonRole = styled.p`\n  @media screen and (min-width: 991px) {\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst H1 = styled.h1`\n  text-transform: capitalize;\n  color: ${props => props.colour};\n  font-size: 30px;\n  line-height: 36px;\n  margin: 40px 20px 20px;\n`;\nconst P = styled.p`\n  margin: 0 20px 20px;\n`;\n\nconst NoPeopleFound = ({\n  colourHex,\n  filter\n}) => __jsx(\"main\", null, __jsx(Container, null, __jsx(H1, {\n  colour: colourHex\n}, \"No People found\"), __jsx(P, null, \"No people matching the filter \", filter, \" found.\")));\n\nconst PeopleFilters = ({\n  colourHexLight,\n  deckColour,\n  deckParagraph,\n  deckImage,\n  acceptedFilters\n}) => __jsx(\"main\", null, __jsx(Deck, {\n  colour: deckColour,\n  text: deckParagraph,\n  image: deckImage\n}), __jsx(Container, null, __jsx(FilterTitle, {\n  colour: colourHexLight\n}, \"Filter By\"), __jsx(\"ul\", null, acceptedFilters.map(filter => __jsx(Filter, {\n  key: filter.name\n}, __jsx(Link, {\n  href: `people?filter=${filter.name}`,\n  passHref: true\n}, __jsx(StyledLink, {\n  colour: filter.colour\n}, __jsx(FilterItemTitle, null, filter.title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(FilterItemDeck, null, filter.deck)))))), __jsx(Clearfix, null)));\n\nconst PeopleList = ({\n  colourHex,\n  people,\n  filter\n}) => __jsx(\"main\", null, __jsx(Container, null, __jsx(H1, {\n  colour: colourHex\n}, \"People: \", filter), __jsx(\"ul\", null, people.map(person => __jsx(Person, {\n  key: person.data.title\n}, __jsx(Link, {\n  href: `/people/${person.data.title}`,\n  passHref: true\n}, __jsx(\"a\", null, __jsx(PersonBlock, {\n  colour: changeColourToHex(person.data.menuColour, true)\n}, __jsx(Image, {\n  url: getFullUrl(person.data.image)\n})), __jsx(PersonBlock, {\n  colour: changeColourToHex(person.data.menuColour, true)\n}, __jsx(Padding, null, __jsx(PersonTitle, null, person.data.title.split('-').map(word => word[0].toUpperCase() + word.substr(1)).join(' ')), __jsx(PersonRole, null, person.data.titleRole), __jsx(Email, null, person.data.email))))))))));\n\nconst People = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: deckColour,\n    1: setDeckColour\n  } = useState('');\n  const {\n    0: deckImage,\n    1: setDeckImage\n  } = useState('');\n  const {\n    0: deckParagraph,\n    1: setDeckParagraph\n  } = useState('');\n  const {\n    0: people,\n    1: setPeople\n  } = useState([]);\n  const {\n    0: filter,\n    1: setFilter\n  } = useState('');\n  const {\n    0: acceptedFilters,\n    1: setAcceptedFilters\n  } = useState([]);\n  const router = useRouter();\n  useEffect(() => {\n    const {\n      query\n    } = router || {};\n    const {\n      filter\n    } = query;\n    setFilter(filter);\n    Promise.all([getData('data/peopleFilters/index.json'), getData('data/people/index.json'), getData('data/pages/people.json')]).then(([acceptedFilters, workingPeople, data]) => {\n      setTitle(data.title);\n      setImage(data.header.image);\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setDeckImage(data.deck.image && getFullUrl(data.deck.image));\n      setDeckParagraph(data.deck.paragraph);\n      setDeckColour(changeColourToHex(data.deck.colour));\n      setAcceptedFilters(Object.values(acceptedFilters).map(f => f.data || f).map(f => ({\n        name: f.name,\n        title: f.title,\n        deck: f.deck,\n        colour: changeColourToHex(f.colour, true)\n      })));\n      let people = Object.values(workingPeople) || [];\n      setPeople(people.filter(person => {\n        const {\n          data: {\n            filters: personFilters\n          }\n        } = person;\n        const keys = Object.keys(personFilters || {}).filter(key => key === filter);\n        return keys.map(key => personFilters[key]).some(personFilter => personFilter === 'true');\n      }));\n      setLoading(false);\n    });\n  }, [router]);\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, \"People - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    title: title,\n    image: image,\n    Header: HeaderContainer\n  }), people.length > 0 && filter && __jsx(PeopleList, {\n    colourHex: colourHex,\n    people: people,\n    filter: filter\n  }), filter && people.length === 0 && __jsx(NoPeopleFound, {\n    colourHex: colourHex,\n    filter: filter\n  }), !filter && __jsx(PeopleFilters, {\n    colourHexLight: colourHexLight,\n    deckColour: deckColour,\n    deckParagraph: deckParagraph,\n    deckImage: deckImage,\n    acceptedFilters: acceptedFilters\n  }), __jsx(Clearfix, null), __jsx(Footer, null));\n};\n\nexport default People;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
