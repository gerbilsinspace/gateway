{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Header from '../../templates/Header';\nimport Footer from '../../templates/Footer';\nimport Container from '../../components/Container';\nimport HeaderContainer from '../../components/HeaderContainer';\nimport Image from '../../components/Image';\nimport ImageWrapper from '../../components/ImageWrapper';\nimport PageSummary from '../../components/PageSummary';\nimport Clearfix from '../../components/Clearfix';\nimport { HideAt } from 'react-with-breakpoints';\nimport { getData, getFullUrl, getMenuColour, getAllColours } from '../../helpers';\nconst PageDeck = styled.div`\n  padding: 40px;\n  background-color: ${props => props.colour};\n  color: white;\n  margin-bottom: 20px;\n`;\nconst StyledNotLink = styled.div`\n  display: inline-block;\n  margin-right: 20px;\n`;\nconst StyledLink = styled.a`\n  display: inline-block;\n  margin-right: 20px;\n  color: #fff;\n  border-bottom: 2px solid #fff;\n`;\n\nconst Pagination = ({\n  maxCount,\n  currentPage = 1\n}) => {\n  let links = [];\n\n  for (let i = 1; i < maxCount + 1; i++) {\n    links.push(i);\n  }\n\n  return links.map(link => {\n    if (link === currentPage) {\n      return __jsx(StyledNotLink, {\n        key: link\n      }, link);\n    }\n\n    if (link === 1) {\n      return __jsx(Link, {\n        href: \"events\",\n        key: link,\n        passHref: true\n      }, __jsx(StyledLink, null, link));\n    }\n\n    return __jsx(Link, {\n      href: `events?page=${link}`,\n      key: link,\n      passHref: true\n    }, __jsx(StyledLink, null, link));\n  });\n};\n\nconst StyledPagination = styled.div`\n  background: ${({\n  color\n}) => color};\n  padding: 10px 20px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  color: #fff;\n`;\nconst StyledEvent = styled.a`\n  padding: 35px;\n  background: ${props => props.color};\n  color: #fff;\n  line-height: 30px;\n  margin: 20px 0 20px;\n  display: block;\n`;\nconst P = styled.p`\n  padding: 100px 20px;\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.3em;\n  color: #fff;\n\n  @media screen and (min-width: 991px) {\n    font-size: 30px;\n    line-height: 36px;\n    padding: 100px 20%;\n  }\n`;\nconst EventLeft = styled.div`\n  @media screen and (min-width: 991px) {\n    float: left;\n    width: 60%;\n    font-size: 24px;\n    line-height: 30px;\n  }\n`;\nconst EventRight = styled.div`\n  float: right;\n  width: 40%;\n`;\nconst EventImageWrapper = styled(ImageWrapper)`\n  margin-top: -35px;\n  margin-bottom: -35px;\n  margin-right: -35px;\n`;\nconst EventDeck = styled.div`\n  @media screen and (min-width: 991px) {\n    margin-top: 50px;\n    margin-bottom: 20px;\n  }\n`;\nconst H1 = styled.h1`\n  margin: 20px 0;\n  font-size: 30px;\n  line-height: 36px;\n`;\nconst NoEvents = styled.p`\n  margin-bottom: 20px;\n`;\n\nconst EventList = ({\n  events,\n  color\n}) => {\n  return events.map(event => {\n    const date = moment(event.dateTime).format('dddd, DD MMM YYYY');\n    const time = moment(event.dateTime).format('HH:mm');\n    const image = getFullUrl(event.image);\n    const listImage = event.listImage && getFullUrl(event.listImage);\n    const title = event.title.split('-').map(word => word[0].toUpperCase() + word.slice(1)).join(' ');\n    const id = event.title.split('?').join('');\n    return __jsx(Link, {\n      key: event.title + date + time,\n      href: `events/${id}`\n    }, __jsx(StyledEvent, {\n      color: color\n    }, __jsx(EventLeft, null, __jsx(\"h2\", null, title), __jsx(\"div\", null, date), __jsx(\"div\", null, time), __jsx(EventDeck, null, event.deck), __jsx(\"div\", null, \"Read More +\")), __jsx(HideAt, {\n      breakpoint: \"mediumAndBelow\"\n    }, __jsx(EventRight, null, __jsx(EventImageWrapper, null, __jsx(Image, {\n      url: listImage || image\n    })))), __jsx(Clearfix, null)));\n  });\n};\n\nconst Events = ({\n  location = {}\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState('');\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: colour,\n    1: setColour\n  } = useState('');\n  const {\n    0: colourHex,\n    1: setColourHex\n  } = useState('');\n  const {\n    0: colourHexLight,\n    1: setColourHexLight\n  } = useState('');\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: subtitleImage,\n    1: setSubtitleImage\n  } = useState('');\n  const {\n    0: subtitleText,\n    1: setSubtitleText\n  } = useState('');\n  const {\n    0: events,\n    1: setEvents\n  } = useState([]);\n  const {\n    0: eventCount,\n    1: setEventCount\n  } = useState(0);\n  const {\n    0: maxPageCount,\n    1: setMaxPageCount\n  } = useState(0);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: deckTitle,\n    1: setDeckTitle\n  } = useState('');\n  const {\n    0: deckParagraph,\n    1: setDeckParagraph\n  } = useState('');\n  useEffect(() => {\n    let workingCurrentPage = location.search;\n\n    if (!workingCurrentPage) {\n      workingCurrentPage = '?page=1';\n    }\n\n    setCurrentPage(parseInt(workingCurrentPage.split('page=')[1], 10));\n    Promise.all([getData('data/events/index.json'), getData('data/pages/events.json')]).then(([data, eventsPageData]) => {\n      const [colour, colourHex, colourHexLight] = getAllColours(getMenuColour(data));\n      setColour(colour);\n      setColourHex(colourHex);\n      setColourHexLight(colourHexLight);\n      setImage(getFullUrl(eventsPageData.header.image));\n      setTitle(eventsPageData.title);\n      setSubtitleImage(getFullUrl(eventsPageData.subtitle.image));\n      setSubtitleText(eventsPageData.subtitle.subtitle);\n      setDeckTitle(eventsPageData.deck.title);\n      setDeckParagraph(eventsPageData.deck.paragraph);\n      const allEvents = Object.values(data).map(event => event.data).filter(event => event && event.dateTime && !event.draft && moment().isBefore(event.dateTime)).sort((a, b) => moment(a.dateTime).isBefore(b.dateTime) ? -1 : 1);\n      const workingEventCount = allEvents.length;\n      setEventCount(workingEventCount);\n      setEvents(allEvents.slice(currentPage * 10 - 10, currentPage * 10));\n      setMaxPageCount(Math.ceil(workingEventCount / 10));\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return __jsx(\"div\", null);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, \"Events - Gateway Church, York\")), __jsx(Header, {\n    colour: colour,\n    colourHex: colourHex,\n    colourHexLight: colourHexLight,\n    title: title,\n    image: image,\n    Header: HeaderContainer\n  }), eventCount === 0 && __jsx(Container, null, __jsx(H1, null, \"No events in the Calendar...\"), __jsx(NoEvents, null, \"It looks like we forgot to keep our events updated, sorry about that!\")), eventCount > 0 && __jsx(React.Fragment, null, __jsx(Container, null, subtitleImage && __jsx(ImageWrapper, null, __jsx(Image, {\n    url: subtitleImage\n  }), __jsx(Container, null, __jsx(PageSummary, {\n    color: colourHex\n  }, subtitleText)))), __jsx(PageDeck, {\n    colour: colourHex\n  }, __jsx(Container, null, deckTitle && __jsx(H2, null, deckTitle), deckParagraph && __jsx(P, null, deckParagraph))), maxPageCount > 1 && __jsx(StyledPagination, {\n    color: colourHex\n  }, __jsx(Pagination, {\n    maxCount: maxPageCount,\n    currentPage: currentPage\n  })), __jsx(Container, null, __jsx(EventList, {\n    events: events,\n    color: colourHexLight\n  }))), __jsx(Footer, null));\n};\n\nexport default Events;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
