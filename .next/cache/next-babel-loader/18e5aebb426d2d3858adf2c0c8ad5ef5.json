{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport fetch from 'isomorphic-fetch';\nimport { url as urlStart, colours } from './config';\nexport var getAllColours = function getAllColours() {\n  var colour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var c = colours.find(function (c) {\n    return c.name.toLowerCase() === colour.toLowerCase();\n  });\n  return c ? [c.name, c.hex, c.hexLight] : [];\n};\nexport var changeColourToHex = function changeColourToHex(colour, lightVariant) {\n  var _getAllColours = getAllColours(colour),\n      _getAllColours2 = _slicedToArray(_getAllColours, 3),\n      hex = _getAllColours2[1],\n      hexLight = _getAllColours2[2];\n\n  return lightVariant ? hexLight : hex;\n};\nexport var getMenuColour = function getMenuColour(pageData) {\n  return pageData.header && pageData.header.menuColour || pageData.menuColour || 'red';\n};\nexport var getMenu = function getMenu() {\n  var menuUrl, menuResponse, menuData;\n  return _regeneratorRuntime.async(function getMenu$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          menuUrl = urlStart + 'data/menu.json';\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(menuUrl)[\"catch\"](function (e) {\n            return e;\n          }));\n\n        case 3:\n          menuResponse = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(menuResponse.json());\n\n        case 6:\n          menuData = _context.sent;\n          return _context.abrupt(\"return\", menuData);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getFullUrl = function getFullUrl() {\n  var urlEnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (urlEnd.includes('http')) {\n    return urlEnd;\n  }\n\n  if (urlEnd[0] === '/') {\n    urlEnd = urlEnd.replace('/', '');\n  }\n\n  return urlStart + urlEnd;\n};\nexport var getLogo = function getLogo(menuColour) {\n  var logoLocation, logoResponse, logoData, logoUrl;\n  return _regeneratorRuntime.async(function getLogo$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          logoLocation = getFullUrl(\"data/logos/\".concat(menuColour || 'red', \".json\"));\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(logoLocation)[\"catch\"](function (e) {\n            return e;\n          }));\n\n        case 3:\n          logoResponse = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(logoResponse.json());\n\n        case 6:\n          logoData = _context2.sent;\n          logoUrl = getFullUrl(logoData.image);\n          return _context2.abrupt(\"return\", logoUrl);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getData = function getData(pageName) {\n  var pageUrl, response, pageData;\n  return _regeneratorRuntime.async(function getData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          pageUrl = urlStart + pageName;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(pageUrl));\n\n        case 3:\n          response = _context3.sent;\n\n          if (response.ok) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", new Error('something messed up'));\n\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 8:\n          pageData = _context3.sent;\n          return _context3.abrupt(\"return\", pageData);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getResizedImageUrl = function getResizedImageUrl(url) {\n  if (!url) {\n    return;\n  }\n\n  var pageWidth = window.innerWidth;\n\n  if (pageWidth < 768) {\n    return url.split('uploads/').join('uploads/mobile/');\n  } else if (pageWidth < 991) {\n    return url.split('uploads/').join('uploads/tablet/');\n  }\n\n  return url.split('uploads/').join('uploads/desktop/');\n};",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
