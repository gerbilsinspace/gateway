{
  "ast": null,
  "code": "import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { useState, useEffect } from 'react';\nimport MobileMenu from '../components/MobileMenu';\nimport Search from '../components/Search';\nimport Menu from '../components/Menu';\nimport { HideAt } from 'react-with-breakpoints';\nimport Clearfix from '../components/Clearfix';\nimport { getMenu, getFullUrl, getLogo, getResizedImageUrl } from '../helpers';\n\nvar MenuTemplate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MenuTemplate, _React$Component);\n\n  function MenuTemplate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MenuTemplate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuTemplate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      menuOpen: false,\n      searchOpen: false\n    });\n\n    return _this;\n  }\n\n  _createClass(MenuTemplate, [{\n    key: \"handleMenuStateChange\",\n    value: function handleMenuStateChange(_ref) {\n      var isOpen = _ref.isOpen;\n      this.setState({\n        menuOpen: isOpen\n      });\n    }\n  }, {\n    key: \"handleSearchStateChange\",\n    value: function handleSearchStateChange(_ref2) {\n      var isOpen = _ref2.isOpen;\n      this.setState({\n        searchOpen: isOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          menuItems = _this$props.menuItems,\n          menuColour = _this$props.menuColour,\n          borderColour = _this$props.borderColour,\n          logoUrl = _this$props.logoUrl,\n          sticky = _this$props.sticky,\n          children = _this$props.children;\n      var mobileMenuItems = menuItems.reduce(function (acc, item) {\n        return item.childMenu ? [].concat(_toConsumableArray(acc), _toConsumableArray(item.childMenu)) : [].concat(_toConsumableArray(acc), [item]);\n      }, []);\n      return React.createElement(React.Fragment, null, React.createElement(HideAt, {\n        breakpoint: \"large\"\n      }, React.createElement(MobileMenu, {\n        menuItems: mobileMenuItems,\n        menuColour: menuColour,\n        isOpen: this.state.menuOpen,\n        handleStateChange: function handleStateChange(state) {\n          _this2.handleMenuStateChange(state);\n        }\n      })), React.createElement(Search, {\n        colour: menuColour,\n        borderColour: borderColour,\n        isOpen: this.state.searchOpen,\n        handleStateChange: function handleStateChange(state) {\n          _this2.handleSearchStateChange(state);\n        }\n      }), children, React.createElement(Menu, {\n        menuItems: menuItems,\n        colour: menuColour,\n        logoUrl: logoUrl,\n        sticky: sticky,\n        onMenuClick: function onMenuClick() {\n          _this2.handleMenuStateChange({\n            isOpen: true\n          });\n        },\n        onSearchClick: function onSearchClick() {\n          _this2.handleSearchStateChange({\n            isOpen: true\n          });\n        }\n      }), React.createElement(Clearfix, null));\n    }\n  }]);\n\n  return MenuTemplate;\n}(React.Component);\n\nvar HeaderTemplate = function HeaderTemplate(_ref3) {\n  var colour = _ref3.colour,\n      colourHex = _ref3.colourHex,\n      colourHexLight = _ref3.colourHexLight,\n      Header = _ref3.Header,\n      title = _ref3.title,\n      image = _ref3.image;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      menu = _useState4[0],\n      setMenu = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      logoUrl = _useState6[0],\n      setLogoUrl = _useState6[1];\n\n  useEffect(function () {\n    _Promise.all([getMenu(), getLogo(colour)]).then(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          menu = _ref5[0].menu,\n          logoUrl = _ref5[1];\n\n      setMenu(menu);\n      setLogoUrl(logoUrl);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return React.createElement(\"div\", null);\n\n  if (!title || !image) {\n    return React.createElement(MenuTemplate, {\n      menuItems: menu,\n      menuColour: colourHex,\n      borderColour: colourHexLight,\n      logoUrl: logoUrl,\n      sticky: true\n    });\n  }\n\n  return React.createElement(MenuTemplate, {\n    menuItems: menu,\n    menuColour: colourHex,\n    borderColour: colourHexLight,\n    logoUrl: logoUrl\n  }, React.createElement(Header, {\n    text: title,\n    image: getResizedImageUrl(getFullUrl(image)),\n    colour: colourHex\n  }));\n};\n\nexport default HeaderTemplate;",
  "map": {
    "version": 3,
    "sources": ["/Users/joeabell/dev/gateway/templates/Header.js"],
    "names": [
      "React",
      "useState",
      "useEffect",
      "MobileMenu",
      "Search",
      "Menu",
      "HideAt",
      "Clearfix",
      "getMenu",
      "getFullUrl",
      "getLogo",
      "getResizedImageUrl",
      "MenuTemplate",
      "menuOpen",
      "searchOpen",
      "isOpen",
      "setState",
      "props",
      "menuItems",
      "menuColour",
      "borderColour",
      "logoUrl",
      "sticky",
      "children",
      "mobileMenuItems",
      "reduce",
      "acc",
      "item",
      "childMenu",
      "state",
      "handleMenuStateChange",
      "handleSearchStateChange",
      "Component",
      "HeaderTemplate",
      "colour",
      "colourHex",
      "colourHexLight",
      "Header",
      "title",
      "image",
      "loading",
      "setLoading",
      "menu",
      "setMenu",
      "setLogoUrl",
      "all",
      "then"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState, useEffect} from 'react';\nimport MobileMenu from '../components/MobileMenu';\nimport Search from '../components/Search';\nimport Menu from '../components/Menu';\nimport {HideAt} from 'react-with-breakpoints';\nimport Clearfix from '../components/Clearfix';\n\nimport {getMenu, getFullUrl, getLogo, getResizedImageUrl} from '../helpers';\n\nclass MenuTemplate extends React.Component {\n  state = {\n    menuOpen: false,\n    searchOpen: false\n  };\n\n  handleMenuStateChange({isOpen}) {\n    this.setState({menuOpen: isOpen});\n  }\n\n  handleSearchStateChange({isOpen}) {\n    this.setState({searchOpen: isOpen});\n  }\n\n  render() {\n    const {\n      menuItems,\n      menuColour,\n      borderColour,\n      logoUrl,\n      sticky,\n      children\n    } = this.props;\n\n    const mobileMenuItems = menuItems.reduce(\n      (acc, item) =>\n        item.childMenu ? [...acc, ...item.childMenu] : [...acc, item],\n      []\n    );\n\n    return (\n      <React.Fragment>\n        <HideAt breakpoint=\"large\">\n          <MobileMenu\n            menuItems={mobileMenuItems}\n            menuColour={menuColour}\n            isOpen={this.state.menuOpen}\n            handleStateChange={state => {\n              this.handleMenuStateChange(state);\n            }}\n          />\n        </HideAt>\n        <Search\n          colour={menuColour}\n          borderColour={borderColour}\n          isOpen={this.state.searchOpen}\n          handleStateChange={state => {\n            this.handleSearchStateChange(state);\n          }}\n        />\n        {children}\n        <Menu\n          menuItems={menuItems}\n          colour={menuColour}\n          logoUrl={logoUrl}\n          sticky={sticky}\n          onMenuClick={() => {\n            this.handleMenuStateChange({isOpen: true});\n          }}\n          onSearchClick={() => {\n            this.handleSearchStateChange({isOpen: true});\n          }}\n        />\n        <Clearfix />\n      </React.Fragment>\n    );\n  }\n}\n\nconst HeaderTemplate = ({\n  colour,\n  colourHex,\n  colourHexLight,\n  Header,\n  title,\n  image\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [menu, setMenu] = useState([]);\n  const [logoUrl, setLogoUrl] = useState('');\n\n  useEffect(() => {\n    Promise.all([getMenu(), getLogo(colour)]).then(([{menu}, logoUrl]) => {\n      setMenu(menu);\n      setLogoUrl(logoUrl);\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) return <div />;\n\n  if (!title || !image) {\n    return (\n      <MenuTemplate\n        menuItems={menu}\n        menuColour={colourHex}\n        borderColour={colourHexLight}\n        logoUrl={logoUrl}\n        sticky={true}\n      />\n    );\n  }\n\n  return (\n    <MenuTemplate\n      menuItems={menu}\n      menuColour={colourHex}\n      borderColour={colourHexLight}\n      logoUrl={logoUrl}\n    >\n      <Header\n        text={title}\n        image={getResizedImageUrl(getFullUrl(image))}\n        colour={colourHex}\n      />\n    </MenuTemplate>\n  );\n};\n\nexport default HeaderTemplate;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
